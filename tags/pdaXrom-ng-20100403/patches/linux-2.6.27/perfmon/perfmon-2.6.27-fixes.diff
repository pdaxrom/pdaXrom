---
 arch/powerpc/perfmon/perfmon_cell.c |   16 ++++++++--------
 perfmon/perfmon_file.c              |    2 +-
 perfmon/perfmon_pmu.c               |    2 +-
 perfmon/perfmon_syscalls.c          |    2 +-
 4 files changed, 11 insertions(+), 11 deletions(-)

--- a/arch/powerpc/perfmon/perfmon_cell.c
+++ b/arch/powerpc/perfmon/perfmon_cell.c
@@ -748,7 +748,7 @@ static void pfm_cell_write_pmd_smp(struc
 		req.pmd = value;
 		smp_call_function_single(target_cpu,
 					 pfm_cell_write_pmd_remote,
-					 &req, 0, 1);
+					 &req, 1);
 	} else {
 		pfm_cell_write_pmd(ctx, cnum, value);
 	}
@@ -811,7 +811,7 @@ static u64 pfm_cell_read_pmd_smp(struct 
 		req.pmd = 0;
 		smp_call_function_single(target_cpu,
 					 pfm_cell_read_pmd_remote,
-					 &req, 0, 1);
+					 &req, 1);
 		return req.pmd;
 	} else {
 		return pfm_cell_read_pmd(ctx, cnum);
@@ -872,7 +872,7 @@ static void pfm_cell_enable_counters_smp
 		req.set = set;
 		smp_call_function_single(target_cpu,
 					 pfm_cell_enable_counters_remote,
-					 &req, 0, 1);
+					 &req, 1);
 	} else {
 		pfm_cell_enable_counters(ctx, set);
 	}
@@ -934,7 +934,7 @@ static void pfm_cell_disable_counters_sm
 		req.set = set;
 		smp_call_function_single(target_cpu,
 					 pfm_cell_disable_counters_remote,
-					 &req, 0, 1);
+					 &req, 1);
 	} else {
 		pfm_cell_disable_counters(ctx, set);
 	}
@@ -1111,7 +1111,7 @@ static void pfm_cell_restore_pmcs_smp(st
 		req.set = set;
 		smp_call_function_single(target_cpu,
 					 pfm_cell_restore_pmcs_remote,
-					 &req, 0, 1);
+					 &req, 1);
 	} else {
 		pfm_cell_restore_pmcs(ctx, set);
 	}
@@ -1187,7 +1187,7 @@ static void pfm_cell_restore_pmds_smp(st
 		req.set = set;
 		smp_call_function_single(target_cpu,
 					 pfm_cell_restore_pmds_remote,
-					 &req, 0, 1);
+					 &req, 1);
 	} else {
 		pfm_cell_restore_pmds(ctx, set);
 	}
@@ -1551,7 +1551,7 @@ static int pfm_cell_ctxswout_thread_smp(
 		req.set = set;
 		smp_call_function_single(target_cpu,
 					 pfm_cell_ctxswout_thread_remote,
-					 &req, 0, 1);
+					 &req, 1);
 		return req.result;
 	} else {
 		return pfm_cell_ctxswout_thread(task, ctx, set);
@@ -1643,7 +1643,7 @@ static void pfm_cell_get_ovfl_pmds_smp(s
 		req.set = set;
 		smp_call_function_single(target_cpu,
 					 pfm_cell_get_ovfl_pmds_remote,
-					 &req, 0, 1);
+					 &req, 1);
 	} else {
 		pfm_cell_get_ovfl_pmds(ctx, set);
 	}
--- a/perfmon/perfmon_file.c
+++ b/perfmon/perfmon_file.c
@@ -486,7 +486,7 @@ static void __pfm_close_remote_cpu(void 
 static int pfm_close_remote_cpu(u32 cpu, struct pfm_context *ctx)
 {
 	BUG_ON(irqs_disabled());
-	return smp_call_function_single(cpu, __pfm_close_remote_cpu, ctx, 0, 1);
+	return smp_call_function_single(cpu, __pfm_close_remote_cpu, ctx, 1);
 }
 #endif /* CONFIG_SMP */
 
--- a/perfmon/perfmon_pmu.c
+++ b/perfmon/perfmon_pmu.c
@@ -314,7 +314,7 @@ unlock:
 		/*
 		 * (re)initialize PMU on each PMU now that we have a description
 		 */
-		on_each_cpu(__pfm_init_percpu, cfg, 0, 0);
+		on_each_cpu(__pfm_init_percpu, cfg, 0);
 	}
 	return ret;
 }
--- a/perfmon/perfmon_syscalls.c
+++ b/perfmon/perfmon_syscalls.c
@@ -161,7 +161,7 @@ static int pfm_get_task(struct pfm_conte
 	/*
 	 * returns 0 if cannot attach
 	 */
-	ret1 = ptrace_may_attach(p);
+	ret1 = ptrace_may_access(p, PTRACE_MODE_ATTACH);
 	if (ret1)
 		ret = ptrace_check_attach(p, 0);
 
