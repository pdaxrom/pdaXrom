For debugging only.

Helper routine to setup DABR (Data Address Breakpoint) register
for kernel use.
---
 arch/powerpc/include/asm/ps3.h     |    4 ++++
 arch/powerpc/kernel/process.c      |   10 ++++++++++
 arch/powerpc/mm/fault.c            |    3 ++-
 arch/powerpc/platforms/ps3/setup.c |   30 ++++++++++++++++++++++++++++++
 4 files changed, 46 insertions(+), 1 deletion(-)

--- a/arch/powerpc/include/asm/ps3.h
+++ b/arch/powerpc/include/asm/ps3.h
@@ -499,4 +499,8 @@ u64 ps3_get_spe_id(void *arg);
 /* mutex synchronizing GPU accesses and video mode changes */
 extern struct mutex ps3_gpu_mutex;
 
+/* kernel debug routines */
+
+int ps3_debug_setup_dabr(u64 address, unsigned int dabr_flags);
+
 #endif
--- a/arch/powerpc/kernel/process.c
+++ b/arch/powerpc/kernel/process.c
@@ -247,6 +247,9 @@ void do_dabr(struct pt_regs *regs, unsig
 {
 	siginfo_t info;
 
+	printk("%s:%d: address %016lxh, code %08lxh\n",
+		__func__, __LINE__, address, error_code);
+
 	if (notify_die(DIE_DABR_MATCH, "dabr_match", regs, error_code,
 			11, SIGSEGV) == NOTIFY_STOP)
 		return;
@@ -263,6 +266,13 @@ void do_dabr(struct pt_regs *regs, unsig
 	/* Clear the DABR */
 	set_dabr(0);
 
+	if (!user_mode(regs)) {
+		show_regs(regs);
+		printk("%s:%d: done: address %016lxh\n", __func__, __LINE__,
+		address);
+		return;
+	}
+
 	/* Deliver the signal to userspace */
 	info.si_signo = SIGTRAP;
 	info.si_errno = 0;
--- a/arch/powerpc/mm/fault.c
+++ b/arch/powerpc/mm/fault.c
@@ -147,7 +147,8 @@ int __kprobes do_page_fault(struct pt_re
 		return 0;
 
 	/* On a kernel SLB miss we can only check for a valid exception entry */
-	if (!user_mode(regs) && (address >= TASK_SIZE))
+	if (!user_mode(regs) && (address >= TASK_SIZE)
+		&& !(error_code & DSISR_DABRMATCH))
 		return SIGSEGV;
 
 #if !(defined(CONFIG_4xx) || defined(CONFIG_BOOKE))
--- a/arch/powerpc/platforms/ps3/setup.c
+++ b/arch/powerpc/platforms/ps3/setup.c
@@ -193,6 +193,36 @@ static int ps3_set_dabr(unsigned long da
 	return lv1_set_dabr(dabr, DABR_KERNEL | DABR_USER) ? -1 : 0;
 }
 
+/**
+ * ps3_debug_setup_dabr - Setup the DABR for kernel use.
+ * @dabr_flags: DABR_DATA_WRITE, DABR_DATA_READ, DABR_TRANSLATION
+ */
+
+int ps3_debug_setup_dabr(u64 address, unsigned int dabr_flags)
+{
+	int result;
+	u64 reg;
+
+	BUG_ON(dabr_flags
+		& ~(DABR_DATA_WRITE | DABR_DATA_READ | DABR_TRANSLATION));
+
+	/* PS3 seems to need DABR_TRANSLATION set to work */
+
+	reg = (address & -8L) | dabr_flags | DABR_TRANSLATION;
+
+	printk("%s: address %016llxh, flags %xh = %016llxh\n", __func__,
+		address, dabr_flags, reg);
+
+	result = ps3_set_dabr(reg);
+
+	if (result)
+		printk("%s: failed: %d %s\n", __func__, result,
+			ps3_result(result));
+
+	return result;
+}
+EXPORT_SYMBOL_GPL(ps3_debug_setup_dabr);
+
 static void __init ps3_setup_arch(void)
 {
 
