Subject: PS3: Add PS3 oprofile platform support

Add PS3 support for oprofile.

Signed-off-by: Geoff Levand <geoffrey.levand@am.sony.com>
---
 arch/powerpc/oprofile/Makefile        |    1 
 arch/powerpc/oprofile/cell-opts-ps3.c |  163 ++++++++++++++++++++++++++++++++++
 arch/powerpc/oprofile/common.c        |    2 
 arch/powerpc/platforms/cell/Kconfig   |    2 
 4 files changed, 166 insertions(+), 2 deletions(-)

--- a/arch/powerpc/oprofile/Makefile
+++ b/arch/powerpc/oprofile/Makefile
@@ -11,6 +11,7 @@ DRIVER_OBJS := $(addprefix ../../../driv
 		timer_int.o )
 
 oprofile-y := $(DRIVER_OBJS) common.o backtrace.o
+oprofile-plat-$(CONFIG_PPC_PS3) += cell-opts-ps3.o
 oprofile-plat-$(CONFIG_PPC_CELL_NATIVE) += cell-opts-rtas.o \
 		cell/spu_profiler.o cell/spu_task_sync.o
 oprofile-$(CONFIG_OPROFILE_CELL) += op_model_cell.o $(oprofile-plat-y) \
--- /dev/null
+++ b/arch/powerpc/oprofile/cell-opts-ps3.c
@@ -0,0 +1,163 @@
+/*
+ *  Cell oprofile platform abstraction.
+ *
+ *  Copyright (C) 2008 Sony Computer Entertainment Inc.
+ *  Copyright 2008 Sony Corp.
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; version 2 of the License.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+
+#include <linux/irq.h>
+#include <linux/oprofile.h>
+#include <asm/ps3.h>
+#include "cell/pr_util.h"
+#include "cell-opts.h"
+
+
+static u32 count_value[NR_PHYS_CTRS];
+
+static u16 ps3_cpu_to_node(int cpu)
+{
+	/* PS3 has a single node. */
+
+	return 0;
+}
+
+static u16 ps3_count_mode(u32 kernel, u32 user)
+{
+	/* lv1 only allows supervisor mode or problem mode. */
+
+	return (kernel && !user) ? CBE_COUNT_SUPERVISOR_MODE
+		: CBE_COUNT_PROBLEM_MODE;
+}
+
+static void ps3_add_sample(u32 cpu, int num_counters, unsigned long *pcm_values,
+	int oprofile_running, u32* reset_value)
+{
+	struct pt_regs *regs;
+	u64 pc;
+	int is_kernel;
+	int i;
+	u32 value;
+
+	regs = get_irq_regs();
+	if (oprofile_running == 1) {
+		pc = regs->nip;
+		is_kernel = is_kernel_addr(pc);
+
+		for (i = 0; i < num_counters; ++i) {
+			value = cbe_read_ctr(cpu, i);
+			if (value >= count_value[i] && count_value[i] != 0) {
+				pr_debug("%s:%d: pmu:add_sample ctr:%d"
+				       " value:0x%x reset:0x%x count:0x%x",
+				       __func__, __LINE__, i, value,
+					reset_value[i], count_value[i]);
+				oprofile_add_pc(pc, is_kernel, i);
+				cbe_write_ctr(cpu, i, reset_value[i]);
+			}
+		}
+	}
+ }
+
+static int ps3_ppu_setup(void)
+{
+	int ret;
+
+	printk("%s:%d:\n", __func__, __LINE__);
+
+	ret = ps3_lpm_open(PS3_LPM_TB_TYPE_NONE, NULL, 0);
+	if (ret) {
+		pr_info("%s:%d: lpm_open error. %d", __func__, __LINE__, ret);
+		return -EFAULT;
+	}
+	return 0;
+}
+
+static void ps3_setup_values(u32* reset_value, u32 count)
+{
+//	reset_value[i] = 0;
+//	count_value[i] = ctr[i].count;
+}
+
+static int ps3_set_signals(const struct pm_signal *array, int count)
+{
+	int i;
+
+	printk("%s:%d:\n", __func__, __LINE__);
+
+	for (i = 0; i < count; i++) {
+		int result = ps3_set_signal(array[i].signal_group, array[i].bit,
+			array[i].sub_unit, array[i].bus_word);
+
+		if (result) {
+			pr_debug("%s:%d: ps3_set_signal[%d] failed.", __func__,
+				__LINE__, i);
+			return -EINVAL;
+		}
+	}
+
+	return 0;
+}
+
+static void ps3_reset_signals(int cpu)
+{
+	ps3_set_signal(0, 0, 0, 0);
+}
+
+static int ps3_sync_start(unsigned int spu_cycle_reset)
+{
+	return DO_GENERIC_SYNC;
+}
+
+static int ps3_sync_stop(unsigned int spu_cycle_reset)
+{
+	ps3_lpm_close();
+	return 1;
+}
+
+static u32 x_ps3_get_hw_thread_id(int cpu)
+{
+	return get_hard_smp_processor_id(cpu);
+}
+
+static struct op_platform_ops ps3_ops = {
+//	.priv = ,
+
+	.sync_start = ps3_sync_start,
+	.sync_stop = ps3_sync_stop,
+
+//	.spu_setup = ps3_spu_setup,
+//	.spu_start = ps3_spu_start,
+//	.spu_stop = ps3_spu_stop,
+	.ppu_setup = ps3_ppu_setup,
+//	.ppu_stop = ,
+
+	.set_signals      = ps3_set_signals,
+	.reset_signals    = ps3_reset_signals,
+	.add_sample       = ps3_add_sample,
+//	.handle_interrupt = ps3_handle_interrupt,
+	.count_mode = ps3_count_mode,
+	.setup_values = ps3_setup_values,
+
+	.get_hw_thread_id = x_ps3_get_hw_thread_id,
+	.x_cpu_to_node = ps3_cpu_to_node,
+};
+
+void op_platform_setup_ps3(const struct op_platform_ops **plat)
+{
+	printk("%s:%d:\n", __func__, __LINE__);
+	*plat = &ps3_ops;
+}
+
--- a/arch/powerpc/oprofile/common.c
+++ b/arch/powerpc/oprofile/common.c
@@ -180,7 +180,7 @@ int __init oprofile_arch_init(struct opr
 #ifdef CONFIG_PPC64
 #ifdef CONFIG_OPROFILE_CELL
 		case PPC_OPROFILE_CELL:
-			if (firmware_has_feature(FW_FEATURE_LPAR))
+			if (firmware_has_feature(FW_FEATURE_BEAT))
 				return -ENODEV;
 			model = &op_model_cell;
 			ops->sync_start = model->sync_start;
--- a/arch/powerpc/platforms/cell/Kconfig
+++ b/arch/powerpc/platforms/cell/Kconfig
@@ -98,5 +98,5 @@ endmenu
 
 config OPROFILE_CELL
 	def_bool y
-	depends on PPC_CELL_NATIVE && (OPROFILE = m || OPROFILE = y)
+	depends on (OPROFILE = m || OPROFILE = y)
 
