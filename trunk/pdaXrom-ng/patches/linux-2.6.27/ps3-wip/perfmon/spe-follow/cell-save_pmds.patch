This patch adds the check of PMU access to pfm_read_pmds() in the
cell-spe-follow mode.

Signed-off-by: Takashi Yamamoto <TakashiA.Yamamoto@jp.sony.com>
---
 include/asm-powerpc/perfmon.h |   12 ++++++++++++
 perfmon/perfmon_rw.c          |   14 +++++++++++++-
 2 files changed, 25 insertions(+), 1 deletion(-)

--- a/include/asm-powerpc/perfmon.h
+++ b/include/asm-powerpc/perfmon.h
@@ -456,6 +456,18 @@ struct pfm_arch_context {
  */
 #define PFM_ARCH_SMPL_ALIGN_SIZE	0
 
+/*
+ * This function returns whether the target SPU program is running.
+ */
+static inline int pfm_cell_can_access_pmu_in_cell_spe_follow(
+	struct pfm_context *ctx)
+{
+	struct pfm_arch_context *ctx_arch = pfm_ctx_arch(ctx);
+	if (ctx_arch->arg)
+		return 1;
+	else
+		return 0;
+}
 
 #endif /* __KERNEL__ */
 #endif /* _ASM_POWERPC_PERFMON_H_ */
--- a/perfmon/perfmon_rw.c
+++ b/perfmon/perfmon_rw.c
@@ -498,7 +498,19 @@ int __pfm_read_pmds(struct pfm_context *
 
 	if (likely(ctx->state == PFM_CTX_LOADED)) {
 		can_access_pmu = __get_cpu_var(pmu_owner) == ctx->task
-			       || ctx->flags.system;
+			|| ctx->flags.system;
+
+#ifdef CONFIG_PPC
+		/*
+		 * In the cell_spe_follow mode,
+		 * The target SPU program may run on the other CPU's SPU,
+		 * So pfm_cell_can_access_pmu_in_cell_spe_follow(ctx)
+		 * is used here.
+		 */
+		if (ctx->flags.cell_spe_follow && !ctx->flags.system)
+			can_access_pmu =
+				pfm_cell_can_access_pmu_in_cell_spe_follow(ctx);
+#endif
 
 		if (can_access_pmu)
 			pfm_arch_serialize();
