Subject: block: Minor comment fix

Minor fix to the inline documentation of blk_release_queue().

Signed-off-by: Geoff Levand <geoffrey.levand@am.sony.com>
---
 block/blk-core.c  |   18 ++++++++++++++++++
 block/blk-sysfs.c |   15 ---------------
 2 files changed, 18 insertions(+), 15 deletions(-)

--- a/block/blk-core.c
+++ b/block/blk-core.c
@@ -434,6 +434,24 @@ void blk_put_queue(struct request_queue 
 	kobject_put(&q->kobj);
 }
 
+/**
+ * blk_cleanup_queue: - release a &struct request_queue when it is no longer needed
+ * @q: the request queue to be released
+ *
+ * Description:
+ *     blk_cleanup_queue is the pair to blk_init_queue() or
+ *     blk_queue_make_request().  It should be called when a request queue is
+ *     being released; typically when a block device is being de-registered.
+ *     Currently, its primary task it to free all the &struct request
+ *     structures that were allocated to the queue and the queue itself
+ *     when the reference count of the queue's kobject reaches zero.
+ *     The low level cleanup is of the queue is done by blk_release_queue()
+ *     via the queue's kobject release function.
+ *
+ * Caveat:
+ *     Hopefully the low level driver will have finished any
+ *     outstanding requests first...
+ **/
 void blk_cleanup_queue(struct request_queue *q)
 {
 	/*
--- a/block/blk-sysfs.c
+++ b/block/blk-sysfs.c
@@ -283,21 +283,6 @@ queue_attr_store(struct kobject *kobj, s
 	return res;
 }
 
-/**
- * blk_cleanup_queue: - release a &struct request_queue when it is no longer needed
- * @kobj:    the kobj belonging of the request queue to be released
- *
- * Description:
- *     blk_cleanup_queue is the pair to blk_init_queue() or
- *     blk_queue_make_request().  It should be called when a request queue is
- *     being released; typically when a block device is being de-registered.
- *     Currently, its primary task it to free all the &struct request
- *     structures that were allocated to the queue and the queue itself.
- *
- * Caveat:
- *     Hopefully the low level driver will have finished any
- *     outstanding requests first...
- **/
 static void blk_release_queue(struct kobject *kobj)
 {
 	struct request_queue *q =
