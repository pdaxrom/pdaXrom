From 3f979d53152fd307d1e9c991ac4b8ed2df80c18c Mon Sep 17 00:00:00 2001
From: Martin Pitt <martin.pitt@ubuntu.com>
Date: Wed, 24 Feb 2010 12:45:03 +0100
Subject: [PATCH] =?UTF-8?q?Bug=2026725=20=E2=80=94=20defer=20initial=20ATA=20SMART=20probing?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

The initial ATA SMART probing in device_new() is very expensive (takes about
0.5 s of CPU/IO time on a Dell Mini 10). Defer the check by half a minute, so
that we don't block CPU/IO when we need it much more urgently (on desktop
session startup or when hotplugging a new device.

Also update the Smart test case to actually call DriveAtaSmartRefreshData(), so
that it succeeds again.

Bug: https://bugs.freedesktop.org/show_bug.cgi?id=26725
---
 src/device.c |   23 +++++++++++++++++++++--
 tests/run    |    4 +++-
 2 files changed, 24 insertions(+), 3 deletions(-)

Index: udisks/src/device.c
===================================================================
--- udisks.orig/src/device.c	2010-06-14 15:24:53.367408625 +0200
+++ udisks/src/device.c	2010-06-14 15:25:00.487409835 +0200
@@ -5074,6 +5074,25 @@
   force_removal (device, NULL, NULL);
 }
 
+static gboolean
+device_initial_ata_smart_refresh (gpointer data)
+{
+  Device *device = (Device *) data;
+  static gchar *ata_smart_refresh_data_options[] = { NULL };
+
+  /* if the SMART status was manually updated, or the device got removed in the
+   * meantime, don't bother */
+  if (device->priv->drive_ata_smart_status == (SkSmartOverall) - 1 &&
+      !device->priv->removed)
+    {
+      g_print("**** INITIAL ATA SMART POLL for %s\n", device->priv->device_file);
+      device_drive_ata_smart_refresh_data (device, ata_smart_refresh_data_options, NULL);
+    }
+
+  g_object_unref (device);
+  return FALSE;
+}
+
 Device *
 device_new (Daemon *daemon,
             GUdevDevice *d)
@@ -5120,9 +5139,8 @@
   /* if just added, update the smart data if applicable */
   if (device->priv->drive_ata_smart_is_available)
     {
-      PROFILE ("device_new(native_path=%s): refresh ATA SMART DATA", native_path);
-      gchar *ata_smart_refresh_data_options[] = { NULL };
-      device_drive_ata_smart_refresh_data (device, ata_smart_refresh_data_options, NULL);
+      g_print("**** QUEUEING initial ata smart refresh for %s\n", device->priv->device_file);
+      g_timeout_add_seconds (30, device_initial_ata_smart_refresh, g_object_ref (device));
     }
 
   PROFILE ("device_new(native_path=%s): end", native_path);
Index: udisks/tests/run
===================================================================
--- udisks.orig/tests/run	2010-06-14 15:24:53.347408666 +0200
+++ udisks/tests/run	2010-06-14 15:25:00.487409835 +0200
@@ -1071,13 +1071,14 @@
                 self.manager_iface.FindDeviceByDeviceFile(hd))
         iface = dbus.Interface(obj, I_D)
         props = dbus.Interface(obj, dbus.PROPERTIES_IFACE)
-        info = self.get_info(devname=hd)
 
         self.assertEqual(props.Get(I_D, 'DriveAtaSmartIsAvailable'),
                 has_smart)
 
         if has_smart:
             print >> sys.stderr, '[avail] ',
+            iface.DriveAtaSmartRefreshData([])
+            info = self.get_info(devname=hd)
             self.assert_(info['ATA SMART'].startswith('Updated at '))
             self.assertNotEqual(props.Get(I_D, 'DriveAtaSmartTimeCollected'), 0)
             global hd_smart_blob
@@ -1094,6 +1095,7 @@
                 self.assertEqual(e._dbus_error_name, 'org.freedesktop.UDisks.Error.Failed')
         else:
             print >> sys.stderr, '[N/A] ',
+            info = self.get_info(devname=hd)
             self.assertEqual(info['ATA SMART'], 'not available')
             self.assertEqual(props.Get(I_D, 'DriveAtaSmartTimeCollected'), 0)
             self.assertEqual(props.Get(I_D, 'DriveAtaSmartBlob'), [])
