#! /bin/sh
#
# udev start script
#

. /etc/init.d/functions

. /etc/udev/udev.conf

udev_root=/dev
sysfs_dir=/sys
udevd=/sbin/udevd
udevd_args="--daemon"
udevt="/sbin/udevadm trigger"
udevs="/sbin/udevadm settle"

make_extra_nodes() {
    [ -e /etc/udev/links.conf ] || return
    grep '^[^#]' /etc/udev/links.conf | \
    while read type name arg1; do
	[ "$type" -a "$name" -a ! -e "/dev/$name" -a ! -L "/dev/$name" ] ||continue
	case "$type" in
    	    L) ln -s $arg1 /dev/$name ;;
    	    D) mkdir -p /dev/$name ;;
    	    M) mknod /dev/$name $arg1 ;;
    	    *) logger "links.conf: unparseable line ($type $name $arg1)" ;;
	esac
    done
}

udev_start() {
    log_begin_msg -n "Starting udev"

    # don't use udev if sysfs is not mounted.
    if [ ! -d $sysfs_dir/kernel ]; then
	logger "udev: sysfs not mounted"
	log_end_msg 1
	exit 1
    fi

    # The reason we don't write to mtab is because we don't ever
    # want /dev to be unavailable (such as by `umount -a').
    logger "mounting... tmpfs at $udev_root"
    mount -n -t tmpfs tmpfs $udev_root -o mode=755
    mkdir -p /dev/.udev
    mknod /dev/null c 1 3
    # Udev handles uevents itself, so we don't need to have
    # the kernel call out to any binary in response to them
    echo > /proc/sys/kernel/hotplug
    logger "creating static nodes"
    make_extra_nodes
    # Start the udev daemon to continually
    # watch for, and act on, uevents
    start-stop-daemon -S -q -x "$udevd" -- $udevd_args
    logger "creating initial udev device nodes..."
    # Now traverse sys/ in order to "coldplug"
    # devices that have already been discovered
    $udevt >/dev/null 2>/dev/null
    # Now wait for udevd to process
    # the uevents we triggered
    $udevs --timeout=60 > /dev/null 2>/dev/null
    log_end_msg $?
    # We can only mount /dev/pts after initialising udev
    if [ -d "/dev/pts" ]; then
    	mount /dev/pts
    fi
    mount -a
    logger "udev startup is finished"
    exit 0
}

udev_stop() {
    log_begin_msg -n "Stopping udev"
    start-stop-daemon -K -q -x "$udevd"
    log_end_msg $?
    umount -l /dev
}

case "$1" in
  start)
	udev_start
	;;
  stop)
	udev_stop
	;;
  *)
	echo "Usage: $0 {start|stop}" >&2
	exit 1
	;;
esac

exit 0
