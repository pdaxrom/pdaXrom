Index: src/plot/32bpp.c
===================================================================
--- src/plot/32bpp.c	(revision 10672)
+++ src/plot/32bpp.c	(working copy)
@@ -27,16 +27,56 @@
 }
 
 #if __BYTE_ORDER == __BIG_ENDIAN
+#define MASK(x, i)    (((uint32_t)x) & (0x000000FFU << 8*i))
+#define ORG(y, j)     (MASK(y, j) >> 8*j)
+#define MOVE(z, k, l) (ORG(z, k) << 8*l)
+
+#define Pa 3
+#define Pb 0
+#define Pg 1
+#define Pr 2
+
+#define Ca 3
+#define Cb 2
+#define Cg 1
+#define Cr 0
+
+#define Ba 2
+#define Bb 1
+#define Bg 0
+#define Br 3
 static inline nsfb_colour_t pixel_to_colour(UNUSED nsfb_t *nsfb, uint32_t pixel)
 {
-        return (pixel >> 8) & ~0xFF000000U;
+	uint32_t a, b, g, r;
+	a = MOVE(pixel, Pa, Ca);
+	b = MOVE(pixel, Pb, Cb);
+	g = MOVE(pixel, Pg, Cg);
+	r = MOVE(pixel, Pr, Cr);
+	return (a | b | g | r);
 }
 
 /* convert a colour value to a 32bpp pixel value ready for screen output */
 static inline uint32_t colour_to_pixel(UNUSED nsfb_t *nsfb, nsfb_colour_t c)
 {
-        return (c << 8);
+	uint32_t a, b, g, r;
+	a = MOVE(c, Ca, Pa);
+	b = MOVE(c, Cb, Pb);
+	g = MOVE(c, Cg, Pg);
+	r = MOVE(c, Cr, Pr);
+	return (a | b | g | r);
 }
+
+//#define bitmap_colour_to_pixel colour_to_pixel
+/* convert a colour value to a 32bpp pixel value ready for screen output */
+static inline uint32_t bitmap_colour_to_pixel(UNUSED nsfb_t *nsfb, nsfb_colour_t c)
+{
+	uint32_t a, b, g, r;
+	a = MOVE(c, Ca, Ba);
+	b = MOVE(c, Cb, Bb);
+	g = MOVE(c, Cg, Bg);
+	r = MOVE(c, Cr, Br);
+	return (a | b | g | r);
+}
 #else /* __BYTE_ORDER == __BIG_ENDIAN */
 static inline nsfb_colour_t pixel_to_colour(UNUSED nsfb_t *nsfb, uint32_t pixel)
 {
@@ -50,6 +90,7 @@
 {
         return ((c & 0xff0000) >> 16) | (c & 0xff00) | ((c & 0xff) << 16);
 }
+#define bitmap_colour_to_pixel colour_to_pixel
 #endif
 
 #define PLOT_TYPE uint32_t
Index: src/plot/16bpp.c
===================================================================
--- src/plot/16bpp.c	(revision 10672)
+++ src/plot/16bpp.c	(working copy)
@@ -38,6 +38,8 @@
         return ((c & 0xF8) << 8) | ((c & 0xFC00 ) >> 5) | ((c & 0xF80000) >> 19);
 }
 
+#define bitmap_colour_to_pixel colour_to_pixel
+
 #define PLOT_TYPE uint16_t
 #define PLOT_LINELEN(ll) ((ll) >> 1)
 
Index: src/plot/common.c
===================================================================
--- src/plot/common.c	(revision 10672)
+++ src/plot/common.c	(working copy)
@@ -314,7 +314,7 @@
 			for (xloop = 0; xloop < rwidth; xloop++) {
 				/* looping through render area horizontally */
 				/* get value of source pixel in question */
-				abpixel = pixel[yoff + xoff];
+				abpixel = pixel_to_colour(nsfb, bitmap_colour_to_pixel(nsfb, pixel[yoff + xoff]));
 				if ((abpixel & 0xFF000000) != 0) {
 					/* pixel is not transparent; have to
 					 * plot something */
@@ -358,7 +358,7 @@
 				/* get value of source pixel in question */
 				abpixel = pixel[yoff + xoff];
 				/* plot pixel */
-				*(pvideo + xloop) = colour_to_pixel(nsfb, abpixel);
+				*(pvideo + xloop) = bitmap_colour_to_pixel(nsfb, abpixel);
 
 				/* handle horizontal interpolation */
 				xoff += dx;
@@ -434,7 +434,7 @@
         if (alpha) {
                 for (yloop = yoff; yloop < height; yloop += bmp_stride) {
                         for (xloop = 0; xloop < width; xloop++) {
-                                abpixel = pixel[yloop + xloop + xoff];
+                                abpixel = pixel_to_colour(nsfb, bitmap_colour_to_pixel(nsfb, pixel[yloop + xloop + xoff]));
                                 if ((abpixel & 0xFF000000) != 0) {
                                 	/* pixel is not transparent; have to
                                 	 * plot something */
@@ -454,7 +454,7 @@
                 for (yloop = yoff; yloop < height; yloop += bmp_stride) {
                         for (xloop = 0; xloop < width; xloop++) {
                                 abpixel = pixel[yloop + xloop + xoff];
-                                *(pvideo + xloop) = colour_to_pixel(nsfb, abpixel);
+                                *(pvideo + xloop) = bitmap_colour_to_pixel(nsfb, abpixel);
                         }
                         pvideo += PLOT_LINELEN(nsfb->linelen);
                 }
Index: src/plot/8bpp.c
===================================================================
--- src/plot/8bpp.c	(revision 10672)
+++ src/plot/8bpp.c	(working copy)
@@ -58,6 +58,8 @@
         return best_col;
 }
 
+#define bitmap_colour_to_pixel colour_to_pixel
+
 #define PLOT_TYPE uint8_t
 #define PLOT_LINELEN(ll) (ll)
 
