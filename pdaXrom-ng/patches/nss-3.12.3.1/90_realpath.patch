---
 mozilla/security/nss/lib/freebl/genload.c |   11 +++++++++++
 1 file changed, 11 insertions(+)

## 90_realpath.patch converted from dpatch file initially by Mike Hommey <glandium@debian.org>
#
# Use realpath() for loader_GetOriginalPathname, so that symlinks are
# properly followed when determining where the current library lives.
#
Index: nss-3.12.0~cvs20071126t1617+nobinonly/mozilla/security/nss/lib/freebl/genload.c
===================================================================
--- nss-3.12.0~cvs20071126t1617+nobinonly.orig/mozilla/security/nss/lib/freebl/genload.c
+++ nss-3.12.0~cvs20071126t1617+nobinonly/mozilla/security/nss/lib/freebl/genload.c
@@ -57,16 +57,26 @@
  * If 'link' is a symbolic link, this function follows the symbolic links
  * and returns the pathname of the ultimate source of the symbolic links.
  * If 'link' is not a symbolic link, this function returns NULL.
  * The caller should call PR_Free to free the string returned by this
  * function.
  */
 static char* loader_GetOriginalPathname(const char* link)
 {
+#ifdef __GLIBC__
+    char* tmp = realpath(link, NULL);
+    char* resolved;
+    if (! tmp)
+    	return NULL;
+    resolved = PR_Malloc(strlen(tmp) + 1);
+    strcpy(resolved, tmp); /* This is necessary because PR_Free might not be using free() */
+    free(tmp);
+    return resolved;
+#else
     char* resolved = NULL;
     char* input = NULL;
     PRUint32 iterations = 0;
     PRInt32 len = 0, retlen = 0;
     if (!link) {
         PR_SetError(PR_INVALID_ARGUMENT_ERROR, 0);
         return NULL;
     }
@@ -91,16 +101,17 @@
         resolved = tmp;
     }
     PR_Free(resolved);
     if (iterations == 1 && retlen < 0) {
         PR_Free(input);
         input = NULL;
     }
     return input;
+#endif
 }
 #endif /* XP_UNIX */
 
 /*
  * Load the library with the file name 'name' residing in the same
  * directory as the reference library, whose pathname is 'referencePath'.
  */
 static PRLibrary *
