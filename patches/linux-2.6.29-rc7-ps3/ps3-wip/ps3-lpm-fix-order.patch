Subject: PS3: Rearrange order of lpm routines

Rearrange the order of the PS3 lpm routines to have dependent routines
at the top of the file.  This change simply changes the location
of the routines, no code changes were introduced.

This reordering is required to satisfy dependencies when these routines
are converted to static routines and called indirectly through the pmu
platform abstraction layer.

Signed-off-by: Geoff Levand <geoffrey.levand@am.sony.com>
---
 drivers/ps3/ps3-lpm.c |  677 ++++++++++++++++++++++++--------------------------
 1 file changed, 338 insertions(+), 339 deletions(-)

--- a/drivers/ps3/ps3-lpm.c
+++ b/drivers/ps3/ps3-lpm.c
@@ -198,6 +198,126 @@ void ps3_set_pm_bookmark(u64 tag, u64 in
 EXPORT_SYMBOL_GPL(ps3_set_pm_bookmark);
 
 /**
+ * ps3_read_pm - Read Other LPM control registers.
+ */
+
+u32 ps3_read_pm(u32 cpu, enum pm_reg_name reg)
+{
+	int result = 0;
+	u64 val = 0;
+
+	switch (reg) {
+	case pm_control:
+		return lpm_priv->shadow.pm_control;
+	case trace_address:
+		return CBE_PM_TRACE_BUF_EMPTY;
+	case pm_start_stop:
+		return lpm_priv->shadow.pm_start_stop;
+	case pm_interval:
+		result = lv1_set_lpm_interval(lpm_priv->lpm_id, 0, 0, &val);
+		if (result) {
+			val = 0;
+			dev_dbg(sbd_core(), "%s:%u: lv1 set_inteval failed: "
+				"reg %u, %s\n", __func__, __LINE__, reg,
+				ps3_result(result));
+		}
+		return (u32)val;
+	case group_control:
+		return lpm_priv->shadow.group_control;
+	case debug_bus_control:
+		return lpm_priv->shadow.debug_bus_control;
+	case pm_status:
+		result = lv1_get_lpm_interrupt_status(lpm_priv->lpm_id,
+						      &val);
+		if (result) {
+			val = 0;
+			dev_dbg(sbd_core(), "%s:%u: lv1 get_lpm_status failed: "
+				"reg %u, %s\n", __func__, __LINE__, reg,
+				ps3_result(result));
+		}
+		return (u32)val;
+	case ext_tr_timer:
+		return 0;
+	default:
+		dev_dbg(sbd_core(), "%s:%u: unknown reg: %d\n", __func__,
+			__LINE__, reg);
+		BUG();
+		break;
+	}
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(ps3_read_pm);
+
+/**
+ * ps3_write_pm - Write Other LPM control registers.
+ */
+
+void ps3_write_pm(u32 cpu, enum pm_reg_name reg, u32 val)
+{
+	int result = 0;
+	u64 dummy;
+
+	switch (reg) {
+	case group_control:
+		if (val != lpm_priv->shadow.group_control)
+			result = lv1_set_lpm_group_control(lpm_priv->lpm_id,
+							   val,
+							   PS3_WRITE_PM_MASK,
+							   &dummy);
+		lpm_priv->shadow.group_control = val;
+		break;
+	case debug_bus_control:
+		if (val != lpm_priv->shadow.debug_bus_control)
+			result = lv1_set_lpm_debug_bus_control(lpm_priv->lpm_id,
+							      val,
+							      PS3_WRITE_PM_MASK,
+							      &dummy);
+		lpm_priv->shadow.debug_bus_control = val;
+		break;
+	case pm_control:
+		if (use_start_stop_bookmark)
+			val |= (PS3_PM_CONTROL_PPU_TH0_BOOKMARK |
+				PS3_PM_CONTROL_PPU_TH1_BOOKMARK);
+		if (val != lpm_priv->shadow.pm_control)
+			result = lv1_set_lpm_general_control(lpm_priv->lpm_id,
+							     val,
+							     PS3_WRITE_PM_MASK,
+							     0, 0, &dummy,
+							     &dummy);
+		lpm_priv->shadow.pm_control = val;
+		break;
+	case pm_interval:
+		result = lv1_set_lpm_interval(lpm_priv->lpm_id, val,
+					      PS3_WRITE_PM_MASK, &dummy);
+		break;
+	case pm_start_stop:
+		if (val != lpm_priv->shadow.pm_start_stop)
+			result = lv1_set_lpm_trigger_control(lpm_priv->lpm_id,
+							     val,
+							     PS3_WRITE_PM_MASK,
+							     &dummy);
+		lpm_priv->shadow.pm_start_stop = val;
+		break;
+	case trace_address:
+	case ext_tr_timer:
+	case pm_status:
+		break;
+	default:
+		dev_dbg(sbd_core(), "%s:%u: unknown reg: %d\n", __func__,
+			__LINE__, reg);
+		BUG();
+		break;
+	}
+
+	if (result)
+		dev_err(sbd_core(), "%s:%u: lv1 set_control failed: "
+			"reg %u, %s\n", __func__, __LINE__, reg,
+			ps3_result(result));
+}
+EXPORT_SYMBOL_GPL(ps3_write_pm);
+
+/**
  * ps3_read_phys_ctr - Read physical counter registers.
  *
  * Each physical counter can act as one 32 bit counter or as two 16 bit
@@ -303,6 +423,58 @@ void ps3_write_phys_ctr(u32 cpu, u32 phy
 EXPORT_SYMBOL_GPL(ps3_write_phys_ctr);
 
 /**
+ * ps3_get_ctr_size - Get the size of a physical counter.
+ *
+ * Returns either 16 or 32.
+ */
+
+u32 ps3_get_ctr_size(u32 cpu, u32 phys_ctr)
+{
+	u32 pm_ctrl;
+
+	if (phys_ctr >= NR_PHYS_CTRS) {
+		dev_dbg(sbd_core(), "%s:%u: phys_ctr too big: %u\n", __func__,
+			__LINE__, phys_ctr);
+		return 0;
+	}
+
+	pm_ctrl = ps3_read_pm(cpu, pm_control);
+	return (pm_ctrl & CBE_PM_16BIT_CTR(phys_ctr)) ? 16 : 32;
+}
+EXPORT_SYMBOL_GPL(ps3_get_ctr_size);
+
+/**
+ * ps3_set_ctr_size - Set the size of a physical counter to 16 or 32 bits.
+ */
+
+void ps3_set_ctr_size(u32 cpu, u32 phys_ctr, u32 ctr_size)
+{
+	u32 pm_ctrl;
+
+	if (phys_ctr >= NR_PHYS_CTRS) {
+		dev_dbg(sbd_core(), "%s:%u: phys_ctr too big: %u\n", __func__,
+			__LINE__, phys_ctr);
+		return;
+	}
+
+	pm_ctrl = ps3_read_pm(cpu, pm_control);
+
+	switch (ctr_size) {
+	case 16:
+		pm_ctrl |= CBE_PM_16BIT_CTR(phys_ctr);
+		ps3_write_pm(cpu, pm_control, pm_ctrl);
+		break;
+
+	case 32:
+		pm_ctrl &= ~CBE_PM_16BIT_CTR(phys_ctr);
+		ps3_write_pm(cpu, pm_control, pm_ctrl);
+		break;
+	default:
+		BUG();
+	}
+}
+EXPORT_SYMBOL_GPL(ps3_set_ctr_size);
+/**
  * ps3_read_ctr - Read counter.
  *
  * Read 16 or 32 bits depending on the current size of the counter.
@@ -390,177 +562,117 @@ void ps3_write_pm07_control(u32 cpu, u32
 EXPORT_SYMBOL_GPL(ps3_write_pm07_control);
 
 /**
- * ps3_read_pm - Read Other LPM control registers.
+ * ps3_enable_pm - Enable the entire performance monitoring unit.
+ *
+ * When we enable the LPM, all pending writes to counters get committed.
  */
 
-u32 ps3_read_pm(u32 cpu, enum pm_reg_name reg)
+void ps3_enable_pm(u32 cpu)
 {
-	int result = 0;
-	u64 val = 0;
+	int result;
+	u64 tmp;
+	int insert_bookmark = 0;
 
-	switch (reg) {
-	case pm_control:
-		return lpm_priv->shadow.pm_control;
-	case trace_address:
-		return CBE_PM_TRACE_BUF_EMPTY;
-	case pm_start_stop:
-		return lpm_priv->shadow.pm_start_stop;
-	case pm_interval:
-		result = lv1_set_lpm_interval(lpm_priv->lpm_id, 0, 0, &val);
-		if (result) {
-			val = 0;
-			dev_dbg(sbd_core(), "%s:%u: lv1 set_inteval failed: "
-				"reg %u, %s\n", __func__, __LINE__, reg,
-				ps3_result(result));
-		}
-		return (u32)val;
-	case group_control:
-		return lpm_priv->shadow.group_control;
-	case debug_bus_control:
-		return lpm_priv->shadow.debug_bus_control;
-	case pm_status:
-		result = lv1_get_lpm_interrupt_status(lpm_priv->lpm_id,
-						      &val);
-		if (result) {
-			val = 0;
-			dev_dbg(sbd_core(), "%s:%u: lv1 get_lpm_status failed: "
-				"reg %u, %s\n", __func__, __LINE__, reg,
-				ps3_result(result));
+	lpm_priv->tb_count = 0;
+
+	if (use_start_stop_bookmark) {
+		if (!(lpm_priv->shadow.pm_start_stop &
+			(PS3_PM_START_STOP_START_MASK
+			| PS3_PM_START_STOP_STOP_MASK))) {
+			result = lv1_set_lpm_trigger_control(lpm_priv->lpm_id,
+				(PS3_PM_START_STOP_PPU_TH0_BOOKMARK_START |
+				PS3_PM_START_STOP_PPU_TH1_BOOKMARK_START |
+				PS3_PM_START_STOP_PPU_TH0_BOOKMARK_STOP |
+				PS3_PM_START_STOP_PPU_TH1_BOOKMARK_STOP),
+				0xFFFFFFFFFFFFFFFFULL, &tmp);
+
+			if (result)
+				dev_err(sbd_core(), "%s:%u: "
+					"lv1_set_lpm_trigger_control failed: "
+					"%s\n", __func__, __LINE__,
+					ps3_result(result));
+
+			insert_bookmark = !result;
 		}
-		return (u32)val;
-	case ext_tr_timer:
-		return 0;
-	default:
-		dev_dbg(sbd_core(), "%s:%u: unknown reg: %d\n", __func__,
-			__LINE__, reg);
-		BUG();
-		break;
 	}
 
-	return 0;
+	result = lv1_start_lpm(lpm_priv->lpm_id);
+
+	if (result)
+		dev_err(sbd_core(), "%s:%u: lv1_start_lpm failed: %s\n",
+			__func__, __LINE__, ps3_result(result));
+
+	if (use_start_stop_bookmark && !result && insert_bookmark)
+		ps3_set_bookmark(get_tb() | PS3_PM_BOOKMARK_START);
 }
-EXPORT_SYMBOL_GPL(ps3_read_pm);
+EXPORT_SYMBOL_GPL(ps3_enable_pm);
 
 /**
- * ps3_write_pm - Write Other LPM control registers.
+ * ps3_disable_pm - Disable the entire performance monitoring unit.
  */
 
-void ps3_write_pm(u32 cpu, enum pm_reg_name reg, u32 val)
+void ps3_disable_pm(u32 cpu)
 {
-	int result = 0;
-	u64 dummy;
+	int result;
+	u64 tmp;
 
-	switch (reg) {
-	case group_control:
-		if (val != lpm_priv->shadow.group_control)
-			result = lv1_set_lpm_group_control(lpm_priv->lpm_id,
-							   val,
-							   PS3_WRITE_PM_MASK,
-							   &dummy);
-		lpm_priv->shadow.group_control = val;
-		break;
-	case debug_bus_control:
-		if (val != lpm_priv->shadow.debug_bus_control)
-			result = lv1_set_lpm_debug_bus_control(lpm_priv->lpm_id,
-							      val,
-							      PS3_WRITE_PM_MASK,
-							      &dummy);
-		lpm_priv->shadow.debug_bus_control = val;
-		break;
-	case pm_control:
-		if (use_start_stop_bookmark)
-			val |= (PS3_PM_CONTROL_PPU_TH0_BOOKMARK |
-				PS3_PM_CONTROL_PPU_TH1_BOOKMARK);
-		if (val != lpm_priv->shadow.pm_control)
-			result = lv1_set_lpm_general_control(lpm_priv->lpm_id,
-							     val,
-							     PS3_WRITE_PM_MASK,
-							     0, 0, &dummy,
-							     &dummy);
-		lpm_priv->shadow.pm_control = val;
-		break;
-	case pm_interval:
-		result = lv1_set_lpm_interval(lpm_priv->lpm_id, val,
-					      PS3_WRITE_PM_MASK, &dummy);
-		break;
-	case pm_start_stop:
-		if (val != lpm_priv->shadow.pm_start_stop)
-			result = lv1_set_lpm_trigger_control(lpm_priv->lpm_id,
-							     val,
-							     PS3_WRITE_PM_MASK,
-							     &dummy);
-		lpm_priv->shadow.pm_start_stop = val;
-		break;
-	case trace_address:
-	case ext_tr_timer:
-	case pm_status:
-		break;
-	default:
-		dev_dbg(sbd_core(), "%s:%u: unknown reg: %d\n", __func__,
-			__LINE__, reg);
-		BUG();
-		break;
+	ps3_set_bookmark(get_tb() | PS3_PM_BOOKMARK_STOP);
+
+	result = lv1_stop_lpm(lpm_priv->lpm_id, &tmp);
+
+	if (result) {
+		if(result != LV1_WRONG_STATE)
+			dev_err(sbd_core(), "%s:%u: lv1_stop_lpm failed: %s\n",
+				__func__, __LINE__, ps3_result(result));
+		return;
 	}
 
-	if (result)
-		dev_err(sbd_core(), "%s:%u: lv1 set_control failed: "
-			"reg %u, %s\n", __func__, __LINE__, reg,
-			ps3_result(result));
+	lpm_priv->tb_count = tmp;
+
+	dev_dbg(sbd_core(), "%s:%u: tb_count %llu (%llxh)\n", __func__, __LINE__,
+		lpm_priv->tb_count, lpm_priv->tb_count);
 }
-EXPORT_SYMBOL_GPL(ps3_write_pm);
+EXPORT_SYMBOL_GPL(ps3_disable_pm);
 
 /**
- * ps3_get_ctr_size - Get the size of a physical counter.
+ * ps3_get_and_clear_pm_interrupts -
  *
- * Returns either 16 or 32.
+ * Clearing interrupts for the entire performance monitoring unit.
+ * Reading pm_status clears the interrupt bits.
  */
 
-u32 ps3_get_ctr_size(u32 cpu, u32 phys_ctr)
+u32 ps3_get_and_clear_pm_interrupts(u32 cpu)
 {
-	u32 pm_ctrl;
-
-	if (phys_ctr >= NR_PHYS_CTRS) {
-		dev_dbg(sbd_core(), "%s:%u: phys_ctr too big: %u\n", __func__,
-			__LINE__, phys_ctr);
-		return 0;
-	}
-
-	pm_ctrl = ps3_read_pm(cpu, pm_control);
-	return (pm_ctrl & CBE_PM_16BIT_CTR(phys_ctr)) ? 16 : 32;
+	return ps3_read_pm(cpu, pm_status);
 }
-EXPORT_SYMBOL_GPL(ps3_get_ctr_size);
+EXPORT_SYMBOL_GPL(ps3_get_and_clear_pm_interrupts);
 
 /**
- * ps3_set_ctr_size - Set the size of a physical counter to 16 or 32 bits.
+ * ps3_enable_pm_interrupts -
+ *
+ * Enabling interrupts for the entire performance monitoring unit.
+ * Enables the interrupt bits in the pm_status register.
  */
 
-void ps3_set_ctr_size(u32 cpu, u32 phys_ctr, u32 ctr_size)
+void ps3_enable_pm_interrupts(u32 cpu, u32 thread, u32 mask)
 {
-	u32 pm_ctrl;
-
-	if (phys_ctr >= NR_PHYS_CTRS) {
-		dev_dbg(sbd_core(), "%s:%u: phys_ctr too big: %u\n", __func__,
-			__LINE__, phys_ctr);
-		return;
-	}
-
-	pm_ctrl = ps3_read_pm(cpu, pm_control);
+	if (mask)
+		ps3_write_pm(cpu, pm_status, mask);
+}
+EXPORT_SYMBOL_GPL(ps3_enable_pm_interrupts);
 
-	switch (ctr_size) {
-	case 16:
-		pm_ctrl |= CBE_PM_16BIT_CTR(phys_ctr);
-		ps3_write_pm(cpu, pm_control, pm_ctrl);
-		break;
+/**
+ * ps3_enable_pm_interrupts -
+ *
+ * Disabling interrupts for the entire performance monitoring unit.
+ */
 
-	case 32:
-		pm_ctrl &= ~CBE_PM_16BIT_CTR(phys_ctr);
-		ps3_write_pm(cpu, pm_control, pm_ctrl);
-		break;
-	default:
-		BUG();
-	}
+void ps3_disable_pm_interrupts(u32 cpu)
+{
+	ps3_get_and_clear_pm_interrupts(cpu);
+	ps3_write_pm(cpu, pm_status, 0);
 }
-EXPORT_SYMBOL_GPL(ps3_set_ctr_size);
+EXPORT_SYMBOL_GPL(ps3_disable_pm_interrupts);
 
 static u64 pm_translate_signal_group_number_on_island2(u64 subgroup)
 {
@@ -839,77 +951,117 @@ u32 ps3_get_hw_thread_id(int cpu)
 EXPORT_SYMBOL_GPL(ps3_get_hw_thread_id);
 
 /**
- * ps3_enable_pm - Enable the entire performance monitoring unit.
- *
- * When we enable the LPM, all pending writes to counters get committed.
+ * ps3_lpm_open - Open the logical performance monitor device.
+ * @tb_type: Specifies the type of trace buffer lv1 sould use for this lpm
+ *  instance, specified by one of enum ps3_lpm_tb_type.
+ * @tb_cache: Optional user supplied buffer to use as the trace buffer cache.
+ *  If NULL, the driver will allocate and manage an internal buffer.
+ *  Unused when when @tb_type is PS3_LPM_TB_TYPE_NONE.
+ * @tb_cache_size: The size in bytes of the user supplied @tb_cache buffer.
+ *  Unused when @tb_cache is NULL or @tb_type is PS3_LPM_TB_TYPE_NONE.
  */
 
-void ps3_enable_pm(u32 cpu)
+int ps3_lpm_open(enum ps3_lpm_tb_type tb_type, void *tb_cache,
+	u64 tb_cache_size)
 {
 	int result;
-	u64 tmp;
-	int insert_bookmark = 0;
+	u64 tb_size;
 
-	lpm_priv->tb_count = 0;
+	BUG_ON(!lpm_priv);
+	BUG_ON(tb_type != PS3_LPM_TB_TYPE_NONE
+		&& tb_type != PS3_LPM_TB_TYPE_INTERNAL);
 
-	if (use_start_stop_bookmark) {
-		if (!(lpm_priv->shadow.pm_start_stop &
-			(PS3_PM_START_STOP_START_MASK
-			| PS3_PM_START_STOP_STOP_MASK))) {
-			result = lv1_set_lpm_trigger_control(lpm_priv->lpm_id,
-				(PS3_PM_START_STOP_PPU_TH0_BOOKMARK_START |
-				PS3_PM_START_STOP_PPU_TH1_BOOKMARK_START |
-				PS3_PM_START_STOP_PPU_TH0_BOOKMARK_STOP |
-				PS3_PM_START_STOP_PPU_TH1_BOOKMARK_STOP),
-				0xFFFFFFFFFFFFFFFFULL, &tmp);
+	if (tb_type == PS3_LPM_TB_TYPE_NONE && tb_cache)
+		dev_dbg(sbd_core(), "%s:%u: bad in vals\n", __func__, __LINE__);
 
-			if (result)
-				dev_err(sbd_core(), "%s:%u: "
-					"lv1_set_lpm_trigger_control failed: "
-					"%s\n", __func__, __LINE__,
-					ps3_result(result));
+	if (!atomic_add_unless(&lpm_priv->open, 1, 1)) {
+		dev_dbg(sbd_core(), "%s:%u: busy\n", __func__, __LINE__);
+		return -EBUSY;
+	}
 
-			insert_bookmark = !result;
+	/* Note tb_cache needs 128 byte alignment. */
+
+	if (tb_type == PS3_LPM_TB_TYPE_NONE) {
+		lpm_priv->tb_cache_size = 0;
+		lpm_priv->tb_cache_internal = NULL;
+		lpm_priv->tb_cache = NULL;
+	} else if (tb_cache) {
+		if (tb_cache != (void *)_ALIGN_UP((unsigned long)tb_cache, 128)
+			|| tb_cache_size != _ALIGN_UP(tb_cache_size, 128)) {
+			dev_err(sbd_core(), "%s:%u: unaligned tb_cache\n",
+				__func__, __LINE__);
+			result = -EINVAL;
+			goto fail_align;
+		}
+		lpm_priv->tb_cache_size = tb_cache_size;
+		lpm_priv->tb_cache_internal = NULL;
+		lpm_priv->tb_cache = tb_cache;
+	} else {
+		lpm_priv->tb_cache_size = PS3_LPM_DEFAULT_TB_CACHE_SIZE;
+		lpm_priv->tb_cache_internal = kzalloc(
+			lpm_priv->tb_cache_size + 127, GFP_KERNEL);
+		if (!lpm_priv->tb_cache_internal) {
+			dev_err(sbd_core(), "%s:%u: alloc internal tb_cache "
+				"failed\n", __func__, __LINE__);
+			result = -ENOMEM;
+			goto fail_malloc;
 		}
+		lpm_priv->tb_cache = (void *)_ALIGN_UP(
+			(unsigned long)lpm_priv->tb_cache_internal, 128);
 	}
 
-	result = lv1_start_lpm(lpm_priv->lpm_id);
+	result = lv1_construct_lpm(lpm_priv->node_id, tb_type, 0, 0,
+				ps3_mm_phys_to_lpar(__pa(lpm_priv->tb_cache)),
+				lpm_priv->tb_cache_size, &lpm_priv->lpm_id,
+				&lpm_priv->outlet_id, &tb_size);
 
-	if (result)
-		dev_err(sbd_core(), "%s:%u: lv1_start_lpm failed: %s\n",
+	if (result) {
+		dev_err(sbd_core(), "%s:%u: lv1_construct_lpm failed: %s\n",
 			__func__, __LINE__, ps3_result(result));
+		result = -EINVAL;
+		goto fail_construct;
+	}
 
-	if (use_start_stop_bookmark && !result && insert_bookmark)
-		ps3_set_bookmark(get_tb() | PS3_PM_BOOKMARK_START);
+	lpm_priv->shadow.pm_control = PS3_LPM_SHADOW_REG_INIT;
+	lpm_priv->shadow.pm_start_stop = PS3_LPM_SHADOW_REG_INIT;
+	lpm_priv->shadow.group_control = PS3_LPM_SHADOW_REG_INIT;
+	lpm_priv->shadow.debug_bus_control = PS3_LPM_SHADOW_REG_INIT;
+
+	dev_dbg(sbd_core(), "%s:%u: lpm_id 0x%llx, outlet_id 0x%llx, "
+		"tb_size 0x%llx\n", __func__, __LINE__, lpm_priv->lpm_id,
+		lpm_priv->outlet_id, tb_size);
+
+	return 0;
+
+fail_construct:
+	kfree(lpm_priv->tb_cache_internal);
+	lpm_priv->tb_cache_internal = NULL;
+fail_malloc:
+fail_align:
+	atomic_dec(&lpm_priv->open);
+	return result;
 }
-EXPORT_SYMBOL_GPL(ps3_enable_pm);
+EXPORT_SYMBOL_GPL(ps3_lpm_open);
 
 /**
- * ps3_disable_pm - Disable the entire performance monitoring unit.
+ * ps3_lpm_close - Close the lpm device.
+ *
  */
 
-void ps3_disable_pm(u32 cpu)
+int ps3_lpm_close(void)
 {
-	int result;
-	u64 tmp;
-
-	ps3_set_bookmark(get_tb() | PS3_PM_BOOKMARK_STOP);
-
-	result = lv1_stop_lpm(lpm_priv->lpm_id, &tmp);
+	dev_dbg(sbd_core(), "%s:%u\n", __func__, __LINE__);
 
-	if (result) {
-		if(result != LV1_WRONG_STATE)
-			dev_err(sbd_core(), "%s:%u: lv1_stop_lpm failed: %s\n",
-				__func__, __LINE__, ps3_result(result));
-		return;
-	}
+	lv1_destruct_lpm(lpm_priv->lpm_id);
+	lpm_priv->lpm_id = 0;
 
-	lpm_priv->tb_count = tmp;
+	kfree(lpm_priv->tb_cache_internal);
+	lpm_priv->tb_cache_internal = NULL;
 
-	dev_dbg(sbd_core(), "%s:%u: tb_count %llu (%llxh)\n", __func__, __LINE__,
-		lpm_priv->tb_count, lpm_priv->tb_count);
+	atomic_dec(&lpm_priv->open);
+	return 0;
 }
-EXPORT_SYMBOL_GPL(ps3_disable_pm);
+EXPORT_SYMBOL_GPL(ps3_lpm_close);
 
 /**
  * ps3_lpm_copy_tb - Copy data from the trace buffer to a kernel buffer.
@@ -1029,159 +1181,6 @@ int ps3_lpm_copy_tb_to_user(unsigned lon
 }
 EXPORT_SYMBOL_GPL(ps3_lpm_copy_tb_to_user);
 
-/**
- * ps3_get_and_clear_pm_interrupts -
- *
- * Clearing interrupts for the entire performance monitoring unit.
- * Reading pm_status clears the interrupt bits.
- */
-
-u32 ps3_get_and_clear_pm_interrupts(u32 cpu)
-{
-	return ps3_read_pm(cpu, pm_status);
-}
-EXPORT_SYMBOL_GPL(ps3_get_and_clear_pm_interrupts);
-
-/**
- * ps3_enable_pm_interrupts -
- *
- * Enabling interrupts for the entire performance monitoring unit.
- * Enables the interrupt bits in the pm_status register.
- */
-
-void ps3_enable_pm_interrupts(u32 cpu, u32 thread, u32 mask)
-{
-	if (mask)
-		ps3_write_pm(cpu, pm_status, mask);
-}
-EXPORT_SYMBOL_GPL(ps3_enable_pm_interrupts);
-
-/**
- * ps3_enable_pm_interrupts -
- *
- * Disabling interrupts for the entire performance monitoring unit.
- */
-
-void ps3_disable_pm_interrupts(u32 cpu)
-{
-	ps3_get_and_clear_pm_interrupts(cpu);
-	ps3_write_pm(cpu, pm_status, 0);
-}
-EXPORT_SYMBOL_GPL(ps3_disable_pm_interrupts);
-
-/**
- * ps3_lpm_open - Open the logical performance monitor device.
- * @tb_type: Specifies the type of trace buffer lv1 sould use for this lpm
- *  instance, specified by one of enum ps3_lpm_tb_type.
- * @tb_cache: Optional user supplied buffer to use as the trace buffer cache.
- *  If NULL, the driver will allocate and manage an internal buffer.
- *  Unused when when @tb_type is PS3_LPM_TB_TYPE_NONE.
- * @tb_cache_size: The size in bytes of the user supplied @tb_cache buffer.
- *  Unused when @tb_cache is NULL or @tb_type is PS3_LPM_TB_TYPE_NONE.
- */
-
-int ps3_lpm_open(enum ps3_lpm_tb_type tb_type, void *tb_cache,
-	u64 tb_cache_size)
-{
-	int result;
-	u64 tb_size;
-
-	BUG_ON(!lpm_priv);
-	BUG_ON(tb_type != PS3_LPM_TB_TYPE_NONE
-		&& tb_type != PS3_LPM_TB_TYPE_INTERNAL);
-
-	if (tb_type == PS3_LPM_TB_TYPE_NONE && tb_cache)
-		dev_dbg(sbd_core(), "%s:%u: bad in vals\n", __func__, __LINE__);
-
-	if (!atomic_add_unless(&lpm_priv->open, 1, 1)) {
-		dev_dbg(sbd_core(), "%s:%u: busy\n", __func__, __LINE__);
-		return -EBUSY;
-	}
-
-	/* Note tb_cache needs 128 byte alignment. */
-
-	if (tb_type == PS3_LPM_TB_TYPE_NONE) {
-		lpm_priv->tb_cache_size = 0;
-		lpm_priv->tb_cache_internal = NULL;
-		lpm_priv->tb_cache = NULL;
-	} else if (tb_cache) {
-		if (tb_cache != (void *)_ALIGN_UP((unsigned long)tb_cache, 128)
-			|| tb_cache_size != _ALIGN_UP(tb_cache_size, 128)) {
-			dev_err(sbd_core(), "%s:%u: unaligned tb_cache\n",
-				__func__, __LINE__);
-			result = -EINVAL;
-			goto fail_align;
-		}
-		lpm_priv->tb_cache_size = tb_cache_size;
-		lpm_priv->tb_cache_internal = NULL;
-		lpm_priv->tb_cache = tb_cache;
-	} else {
-		lpm_priv->tb_cache_size = PS3_LPM_DEFAULT_TB_CACHE_SIZE;
-		lpm_priv->tb_cache_internal = kzalloc(
-			lpm_priv->tb_cache_size + 127, GFP_KERNEL);
-		if (!lpm_priv->tb_cache_internal) {
-			dev_err(sbd_core(), "%s:%u: alloc internal tb_cache "
-				"failed\n", __func__, __LINE__);
-			result = -ENOMEM;
-			goto fail_malloc;
-		}
-		lpm_priv->tb_cache = (void *)_ALIGN_UP(
-			(unsigned long)lpm_priv->tb_cache_internal, 128);
-	}
-
-	result = lv1_construct_lpm(lpm_priv->node_id, tb_type, 0, 0,
-				ps3_mm_phys_to_lpar(__pa(lpm_priv->tb_cache)),
-				lpm_priv->tb_cache_size, &lpm_priv->lpm_id,
-				&lpm_priv->outlet_id, &tb_size);
-
-	if (result) {
-		dev_err(sbd_core(), "%s:%u: lv1_construct_lpm failed: %s\n",
-			__func__, __LINE__, ps3_result(result));
-		result = -EINVAL;
-		goto fail_construct;
-	}
-
-	lpm_priv->shadow.pm_control = PS3_LPM_SHADOW_REG_INIT;
-	lpm_priv->shadow.pm_start_stop = PS3_LPM_SHADOW_REG_INIT;
-	lpm_priv->shadow.group_control = PS3_LPM_SHADOW_REG_INIT;
-	lpm_priv->shadow.debug_bus_control = PS3_LPM_SHADOW_REG_INIT;
-
-	dev_dbg(sbd_core(), "%s:%u: lpm_id 0x%llx, outlet_id 0x%llx, "
-		"tb_size 0x%llx\n", __func__, __LINE__, lpm_priv->lpm_id,
-		lpm_priv->outlet_id, tb_size);
-
-	return 0;
-
-fail_construct:
-	kfree(lpm_priv->tb_cache_internal);
-	lpm_priv->tb_cache_internal = NULL;
-fail_malloc:
-fail_align:
-	atomic_dec(&lpm_priv->open);
-	return result;
-}
-EXPORT_SYMBOL_GPL(ps3_lpm_open);
-
-/**
- * ps3_lpm_close - Close the lpm device.
- *
- */
-
-int ps3_lpm_close(void)
-{
-	dev_dbg(sbd_core(), "%s:%u\n", __func__, __LINE__);
-
-	lv1_destruct_lpm(lpm_priv->lpm_id);
-	lpm_priv->lpm_id = 0;
-
-	kfree(lpm_priv->tb_cache_internal);
-	lpm_priv->tb_cache_internal = NULL;
-
-	atomic_dec(&lpm_priv->open);
-	return 0;
-}
-EXPORT_SYMBOL_GPL(ps3_lpm_close);
-
 static int __devinit ps3_lpm_probe(struct ps3_system_bus_device *dev)
 {
 	dev_dbg(&dev->core, " -> %s:%u\n", __func__, __LINE__);
