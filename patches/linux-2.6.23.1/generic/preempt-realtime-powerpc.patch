---
 arch/powerpc/kernel/smp.c                 |   12 ++++++++-
 arch/powerpc/kernel/traps.c               |    9 +++++-
 arch/powerpc/platforms/cell/smp.c         |    2 -
 arch/powerpc/platforms/chrp/smp.c         |    2 -
 arch/powerpc/platforms/chrp/time.c        |    2 -
 arch/powerpc/platforms/powermac/feature.c |    2 -
 arch/powerpc/platforms/powermac/nvram.c   |    2 -
 arch/powerpc/platforms/powermac/pic.c     |    2 -
 arch/powerpc/platforms/pseries/smp.c      |    2 -
 arch/ppc/8260_io/enet.c                   |    2 -
 arch/ppc/8260_io/fcc_enet.c               |    2 -
 arch/ppc/8xx_io/commproc.c                |    2 -
 arch/ppc/8xx_io/enet.c                    |    2 -
 arch/ppc/8xx_io/fec.c                     |    2 -
 arch/ppc/kernel/smp.c                     |   12 ++++++++-
 arch/ppc/kernel/traps.c                   |    6 +++-
 arch/ppc/platforms/hdpu.c                 |    2 -
 arch/ppc/platforms/sbc82xx.c              |    2 -
 arch/ppc/syslib/cpm2_common.c             |    2 -
 arch/ppc/syslib/open_pic.c                |    2 -
 arch/ppc/syslib/open_pic2.c               |    2 -
 include/asm-powerpc/hw_irq.h              |   40 ++++++++++++++++++------------
 22 files changed, 76 insertions(+), 37 deletions(-)

Index: linux-2.6.23.1-rt5/arch/powerpc/kernel/smp.c
===================================================================
--- linux-2.6.23.1-rt5.orig/arch/powerpc/kernel/smp.c
+++ linux-2.6.23.1-rt5/arch/powerpc/kernel/smp.c
@@ -126,6 +126,16 @@ void smp_send_reschedule(int cpu)
 		smp_ops->message_pass(cpu, PPC_MSG_RESCHEDULE);
 }
 
+/*
+ * this function sends a 'reschedule' IPI to all other CPUs.
+ * This is used when RT tasks are starving and other CPUs
+ * might be able to run them:
+ */
+void smp_send_reschedule_allbutself(void)
+{
+	smp_ops->message_pass(MSG_ALL_BUT_SELF, PPC_MSG_RESCHEDULE);
+}
+
 #ifdef CONFIG_DEBUGGER
 void smp_send_debugger_break(int cpu)
 {
@@ -162,7 +172,7 @@ void smp_send_stop(void)
  * static memory requirements. It also looks cleaner.
  * Stolen from the i386 version.
  */
-static  __cacheline_aligned_in_smp DEFINE_SPINLOCK(call_lock);
+static  __cacheline_aligned_in_smp DEFINE_RAW_SPINLOCK(call_lock);
 
 static struct call_data_struct {
 	void (*func) (void *info);
Index: linux-2.6.23.1-rt5/arch/powerpc/kernel/traps.c
===================================================================
--- linux-2.6.23.1-rt5.orig/arch/powerpc/kernel/traps.c
+++ linux-2.6.23.1-rt5/arch/powerpc/kernel/traps.c
@@ -97,11 +97,11 @@ static inline void pmac_backlight_unblan
 int die(const char *str, struct pt_regs *regs, long err)
 {
 	static struct {
-		spinlock_t lock;
+		raw_spinlock_t lock;
 		u32 lock_owner;
 		int lock_owner_depth;
 	} die = {
-		.lock =			__SPIN_LOCK_UNLOCKED(die.lock),
+		.lock =			_RAW_SPIN_LOCK_UNLOCKED(die.lock),
 		.lock_owner =		-1,
 		.lock_owner_depth =	0
 	};
@@ -178,6 +178,11 @@ void _exception(int signr, struct pt_reg
 			return;
 	}
 
+#ifdef CONFIG_PREEMPT_RT
+	local_irq_enable();
+	preempt_check_resched();
+#endif
+
 	memset(&info, 0, sizeof(info));
 	info.si_signo = signr;
 	info.si_code = code;
Index: linux-2.6.23.1-rt5/arch/powerpc/platforms/cell/smp.c
===================================================================
--- linux-2.6.23.1-rt5.orig/arch/powerpc/platforms/cell/smp.c
+++ linux-2.6.23.1-rt5/arch/powerpc/platforms/cell/smp.c
@@ -133,7 +133,7 @@ static void __devinit smp_iic_setup_cpu(
 		iic_setup_cpu();
 }
 
-static DEFINE_SPINLOCK(timebase_lock);
+static DEFINE_RAW_SPINLOCK(timebase_lock);
 static unsigned long timebase = 0;
 
 static void __devinit cell_give_timebase(void)
Index: linux-2.6.23.1-rt5/arch/powerpc/platforms/chrp/smp.c
===================================================================
--- linux-2.6.23.1-rt5.orig/arch/powerpc/platforms/chrp/smp.c
+++ linux-2.6.23.1-rt5/arch/powerpc/platforms/chrp/smp.c
@@ -44,7 +44,7 @@ static void __devinit smp_chrp_setup_cpu
 	mpic_setup_this_cpu();
 }
 
-static DEFINE_SPINLOCK(timebase_lock);
+static DEFINE_RAW_SPINLOCK(timebase_lock);
 static unsigned int timebase_upper = 0, timebase_lower = 0;
 
 void __devinit smp_chrp_give_timebase(void)
Index: linux-2.6.23.1-rt5/arch/powerpc/platforms/chrp/time.c
===================================================================
--- linux-2.6.23.1-rt5.orig/arch/powerpc/platforms/chrp/time.c
+++ linux-2.6.23.1-rt5/arch/powerpc/platforms/chrp/time.c
@@ -27,7 +27,7 @@
 #include <asm/sections.h>
 #include <asm/time.h>
 
-extern spinlock_t rtc_lock;
+extern raw_spinlock_t rtc_lock;
 
 static int nvram_as1 = NVRAM_AS1;
 static int nvram_as0 = NVRAM_AS0;
Index: linux-2.6.23.1-rt5/arch/powerpc/platforms/powermac/feature.c
===================================================================
--- linux-2.6.23.1-rt5.orig/arch/powerpc/platforms/powermac/feature.c
+++ linux-2.6.23.1-rt5/arch/powerpc/platforms/powermac/feature.c
@@ -59,7 +59,7 @@ extern struct device_node *k2_skiplist[2
  * We use a single global lock to protect accesses. Each driver has
  * to take care of its own locking
  */
-DEFINE_SPINLOCK(feature_lock);
+DEFINE_RAW_SPINLOCK(feature_lock);
 
 #define LOCK(flags)	spin_lock_irqsave(&feature_lock, flags);
 #define UNLOCK(flags)	spin_unlock_irqrestore(&feature_lock, flags);
Index: linux-2.6.23.1-rt5/arch/powerpc/platforms/powermac/nvram.c
===================================================================
--- linux-2.6.23.1-rt5.orig/arch/powerpc/platforms/powermac/nvram.c
+++ linux-2.6.23.1-rt5/arch/powerpc/platforms/powermac/nvram.c
@@ -80,7 +80,7 @@ static int is_core_99;
 static int core99_bank = 0;
 static int nvram_partitions[3];
 // XXX Turn that into a sem
-static DEFINE_SPINLOCK(nv_lock);
+static DEFINE_RAW_SPINLOCK(nv_lock);
 
 static int (*core99_write_bank)(int bank, u8* datas);
 static int (*core99_erase_bank)(int bank);
Index: linux-2.6.23.1-rt5/arch/powerpc/platforms/powermac/pic.c
===================================================================
--- linux-2.6.23.1-rt5.orig/arch/powerpc/platforms/powermac/pic.c
+++ linux-2.6.23.1-rt5/arch/powerpc/platforms/powermac/pic.c
@@ -63,7 +63,7 @@ static int max_irqs;
 static int max_real_irqs;
 static u32 level_mask[4];
 
-static DEFINE_SPINLOCK(pmac_pic_lock);
+static DEFINE_RAW_SPINLOCK(pmac_pic_lock);
 
 #define NR_MASK_WORDS	((NR_IRQS + 31) / 32)
 static unsigned long ppc_lost_interrupts[NR_MASK_WORDS];
Index: linux-2.6.23.1-rt5/arch/powerpc/platforms/pseries/smp.c
===================================================================
--- linux-2.6.23.1-rt5.orig/arch/powerpc/platforms/pseries/smp.c
+++ linux-2.6.23.1-rt5/arch/powerpc/platforms/pseries/smp.c
@@ -154,7 +154,7 @@ static void __devinit smp_xics_setup_cpu
 }
 #endif /* CONFIG_XICS */
 
-static DEFINE_SPINLOCK(timebase_lock);
+static DEFINE_RAW_SPINLOCK(timebase_lock);
 static unsigned long timebase = 0;
 
 static void __devinit pSeries_give_timebase(void)
Index: linux-2.6.23.1-rt5/arch/ppc/8260_io/enet.c
===================================================================
--- linux-2.6.23.1-rt5.orig/arch/ppc/8260_io/enet.c
+++ linux-2.6.23.1-rt5/arch/ppc/8260_io/enet.c
@@ -115,7 +115,7 @@ struct scc_enet_private {
 	scc_t	*sccp;
 	struct	net_device_stats stats;
 	uint	tx_full;
-	spinlock_t lock;
+	raw_spinlock_t lock;
 };
 
 static int scc_enet_open(struct net_device *dev);
Index: linux-2.6.23.1-rt5/arch/ppc/8260_io/fcc_enet.c
===================================================================
--- linux-2.6.23.1-rt5.orig/arch/ppc/8260_io/fcc_enet.c
+++ linux-2.6.23.1-rt5/arch/ppc/8260_io/fcc_enet.c
@@ -375,7 +375,7 @@ struct fcc_enet_private {
 	volatile fcc_enet_t	*ep;
 	struct	net_device_stats stats;
 	uint	tx_free;
-	spinlock_t lock;
+	raw_spinlock_t lock;
 
 #ifdef	CONFIG_USE_MDIO
 	uint	phy_id;
Index: linux-2.6.23.1-rt5/arch/ppc/8xx_io/commproc.c
===================================================================
--- linux-2.6.23.1-rt5.orig/arch/ppc/8xx_io/commproc.c
+++ linux-2.6.23.1-rt5/arch/ppc/8xx_io/commproc.c
@@ -370,7 +370,7 @@ cpm_setbrg(uint brg, uint rate)
 /*
  * dpalloc / dpfree bits.
  */
-static spinlock_t cpm_dpmem_lock;
+static raw_spinlock_t cpm_dpmem_lock;
 /*
  * 16 blocks should be enough to satisfy all requests
  * until the memory subsystem goes up...
Index: linux-2.6.23.1-rt5/arch/ppc/8xx_io/enet.c
===================================================================
--- linux-2.6.23.1-rt5.orig/arch/ppc/8xx_io/enet.c
+++ linux-2.6.23.1-rt5/arch/ppc/8xx_io/enet.c
@@ -142,7 +142,7 @@ struct scc_enet_private {
 	unsigned char *rx_vaddr[RX_RING_SIZE];
 	struct	net_device_stats stats;
 	uint	tx_full;
-	spinlock_t lock;
+	raw_spinlock_t lock;
 };
 
 static int scc_enet_open(struct net_device *dev);
Index: linux-2.6.23.1-rt5/arch/ppc/8xx_io/fec.c
===================================================================
--- linux-2.6.23.1-rt5.orig/arch/ppc/8xx_io/fec.c
+++ linux-2.6.23.1-rt5/arch/ppc/8xx_io/fec.c
@@ -164,7 +164,7 @@ struct fec_enet_private {
 
 	struct	net_device_stats stats;
 	uint	tx_full;
-	spinlock_t lock;
+	raw_spinlock_t lock;
 
 #ifdef	CONFIG_USE_MDIO
 	uint	phy_id;
Index: linux-2.6.23.1-rt5/arch/ppc/kernel/smp.c
===================================================================
--- linux-2.6.23.1-rt5.orig/arch/ppc/kernel/smp.c
+++ linux-2.6.23.1-rt5/arch/ppc/kernel/smp.c
@@ -136,6 +136,16 @@ void smp_send_reschedule(int cpu)
 	smp_message_pass(cpu, PPC_MSG_RESCHEDULE);
 }
 
+/*
+ * this function sends a 'reschedule' IPI to all other CPUs.
+ * This is used when RT tasks are starving and other CPUs
+ * might be able to run them:
+ */
+void smp_send_reschedule_allbutself(void)
+{
+	smp_message_pass(MSG_ALL_BUT_SELF, PPC_MSG_RESCHEDULE, 0, 0);
+}
+
 #ifdef CONFIG_XMON
 void smp_send_xmon_break(int cpu)
 {
@@ -160,7 +170,7 @@ void smp_send_stop(void)
  * static memory requirements. It also looks cleaner.
  * Stolen from the i386 version.
  */
-static DEFINE_SPINLOCK(call_lock);
+static DEFINE_RAW_SPINLOCK(call_lock);
 
 static struct call_data_struct {
 	void (*func) (void *info);
Index: linux-2.6.23.1-rt5/arch/ppc/kernel/traps.c
===================================================================
--- linux-2.6.23.1-rt5.orig/arch/ppc/kernel/traps.c
+++ linux-2.6.23.1-rt5/arch/ppc/kernel/traps.c
@@ -72,7 +72,7 @@ void (*debugger_fault_handler)(struct pt
  * Trap & Exception support
  */
 
-DEFINE_SPINLOCK(die_lock);
+DEFINE_RAW_SPINLOCK(die_lock);
 
 int die(const char * str, struct pt_regs * fp, long err)
 {
@@ -108,6 +108,10 @@ void _exception(int signr, struct pt_reg
 		debugger(regs);
 		die("Exception in kernel mode", regs, signr);
 	}
+#ifdef CONFIG_PREEMPT_RT
+	local_irq_enable();
+	preempt_check_resched();
+#endif
 	info.si_signo = signr;
 	info.si_errno = 0;
 	info.si_code = code;
Index: linux-2.6.23.1-rt5/arch/ppc/platforms/hdpu.c
===================================================================
--- linux-2.6.23.1-rt5.orig/arch/ppc/platforms/hdpu.c
+++ linux-2.6.23.1-rt5/arch/ppc/platforms/hdpu.c
@@ -55,7 +55,7 @@ static void parse_bootinfo(unsigned long
 static void hdpu_set_l1pe(void);
 static void hdpu_cpustate_set(unsigned char new_state);
 #ifdef CONFIG_SMP
-static DEFINE_SPINLOCK(timebase_lock);
+static DEFINE_RAW_SPINLOCK(timebase_lock);
 static unsigned int timebase_upper = 0, timebase_lower = 0;
 extern int smp_tb_synchronized;
 
Index: linux-2.6.23.1-rt5/arch/ppc/platforms/sbc82xx.c
===================================================================
--- linux-2.6.23.1-rt5.orig/arch/ppc/platforms/sbc82xx.c
+++ linux-2.6.23.1-rt5/arch/ppc/platforms/sbc82xx.c
@@ -65,7 +65,7 @@ static void sbc82xx_time_init(void)
 
 static volatile char *sbc82xx_i8259_map;
 static char sbc82xx_i8259_mask = 0xff;
-static DEFINE_SPINLOCK(sbc82xx_i8259_lock);
+static DEFINE_RAW_SPINLOCK(sbc82xx_i8259_lock);
 
 static void sbc82xx_i8259_mask_and_ack_irq(unsigned int irq_nr)
 {
Index: linux-2.6.23.1-rt5/arch/ppc/syslib/cpm2_common.c
===================================================================
--- linux-2.6.23.1-rt5.orig/arch/ppc/syslib/cpm2_common.c
+++ linux-2.6.23.1-rt5/arch/ppc/syslib/cpm2_common.c
@@ -114,7 +114,7 @@ cpm2_fastbrg(uint brg, uint rate, int di
 /*
  * dpalloc / dpfree bits.
  */
-static spinlock_t cpm_dpmem_lock;
+static raw_spinlock_t cpm_dpmem_lock;
 /* 16 blocks should be enough to satisfy all requests
  * until the memory subsystem goes up... */
 static rh_block_t cpm_boot_dpmem_rh_block[16];
Index: linux-2.6.23.1-rt5/arch/ppc/syslib/open_pic.c
===================================================================
--- linux-2.6.23.1-rt5.orig/arch/ppc/syslib/open_pic.c
+++ linux-2.6.23.1-rt5/arch/ppc/syslib/open_pic.c
@@ -526,7 +526,7 @@ void openpic_reset_processor_phys(u_int 
 }
 
 #if defined(CONFIG_SMP) || defined(CONFIG_PM)
-static DEFINE_SPINLOCK(openpic_setup_lock);
+static DEFINE_RAW_SPINLOCK(openpic_setup_lock);
 #endif
 
 #ifdef CONFIG_SMP
Index: linux-2.6.23.1-rt5/arch/ppc/syslib/open_pic2.c
===================================================================
--- linux-2.6.23.1-rt5.orig/arch/ppc/syslib/open_pic2.c
+++ linux-2.6.23.1-rt5/arch/ppc/syslib/open_pic2.c
@@ -380,7 +380,7 @@ static void openpic2_set_spurious(u_int 
 			   vec);
 }
 
-static DEFINE_SPINLOCK(openpic2_setup_lock);
+static DEFINE_RAW_SPINLOCK(openpic2_setup_lock);
 
 /*
  *  Initialize a timer interrupt (and disable it)
Index: linux-2.6.23.1-rt5/include/asm-powerpc/hw_irq.h
===================================================================
--- linux-2.6.23.1-rt5.orig/include/asm-powerpc/hw_irq.h
+++ linux-2.6.23.1-rt5/include/asm-powerpc/hw_irq.h
@@ -20,8 +20,8 @@ static inline unsigned long local_get_fl
 {
 	unsigned long flags;
 
-	__asm__ __volatile__("lbz %0,%1(13)"
-	: "=r" (flags)
+<<<<<<< delete extern unsigned long local_get_flags(void);
+<<<<<<< delete extern unsigned long local_irq_disable(void);
 	: "i" (offsetof(struct paca_struct, soft_enabled)));
 
 	return flags;
@@ -39,14 +39,19 @@ static inline unsigned long local_irq_di
 	return flags;
 }
 
-extern void local_irq_restore(unsigned long);
+
 extern void iseries_handle_interrupts(void);
+extern unsigned long raw_local_get_flags(void);
+extern unsigned long raw_local_irq_disable(void);
+extern void raw_local_irq_restore(unsigned long);
+
+#define raw_local_irq_enable()		raw_local_irq_restore(1)
+#define raw_local_save_flags(flags)	((flags) = raw_local_get_flags())
+#define raw_local_irq_save(flags)	((flags) = raw_local_irq_disable())
 
-#define local_irq_enable()	local_irq_restore(1)
-#define local_save_flags(flags)	((flags) = local_get_flags())
-#define local_irq_save(flags)	((flags) = local_irq_disable())
+#define raw_irqs_disabled()		(raw_local_get_flags() == 0)
+#define raw_irqs_disabled_flags(flags)	((flags) == 0)
 
-#define irqs_disabled()		(local_get_flags() == 0)
 
 #define __hard_irq_enable()	__mtmsrd(mfmsr() | MSR_EE, 1)
 #define __hard_irq_disable()	__mtmsrd(mfmsr() & ~MSR_EE, 1)
@@ -62,13 +67,15 @@ extern void iseries_handle_interrupts(vo
 
 #if defined(CONFIG_BOOKE)
 #define SET_MSR_EE(x)	mtmsr(x)
-#define local_irq_restore(flags)	__asm__ __volatile__("wrtee %0" : : "r" (flags) : "memory")
+#define raw_local_irq_restore(flags)	__asm__ __volatile__("wrtee %0" : : "r" (flags) : "memory")
+<<<<<<< delete #define local_irq_restore(flags) do { \
+#define raw_local_irq_restore(flags) do { \
 #else
 #define SET_MSR_EE(x)	mtmsr(x)
-#define local_irq_restore(flags)	mtmsr(flags)
+#define raw_local_irq_restore(flags)	mtmsr(flags)
 #endif
 
-static inline void local_irq_disable(void)
+static inline void raw_local_irq_disable(void)
 {
 #ifdef CONFIG_BOOKE
 	__asm__ __volatile__("wrteei 0": : :"memory");
@@ -80,7 +87,7 @@ static inline void local_irq_disable(voi
 #endif
 }
 
-static inline void local_irq_enable(void)
+static inline void raw_local_irq_enable(void)
 {
 #ifdef CONFIG_BOOKE
 	__asm__ __volatile__("wrteei 1": : :"memory");
@@ -92,7 +99,7 @@ static inline void local_irq_enable(void
 #endif
 }
 
-static inline void local_irq_save_ptr(unsigned long *flags)
+static inline void raw_local_irq_save_ptr(unsigned long *flags)
 {
 	unsigned long msr;
 	msr = mfmsr();
@@ -105,13 +112,16 @@ static inline void local_irq_save_ptr(un
 	__asm__ __volatile__("": : :"memory");
 }
 
-#define local_save_flags(flags)	((flags) = mfmsr())
-#define local_irq_save(flags)	local_irq_save_ptr(&flags)
-#define irqs_disabled()		((mfmsr() & MSR_EE) == 0)
+#define raw_local_save_flags(flags)		((flags) = mfmsr())
+#define raw_local_irq_save(flags)		raw_local_irq_save_ptr(&flags)
+#define raw_irqs_disabled()			((mfmsr() & MSR_EE) == 0)
+#define raw_irqs_disabled_flags(flags)	((flags & MSR_EE) == 0)
 
 #define hard_irq_enable()	local_irq_enable()
 #define hard_irq_disable()	local_irq_disable()
 
+#include <linux/trace_irqflags.h>
+
 #endif /* CONFIG_PPC64 */
 
 /*
