---
 kernel/rcuclassic.c |    6 +++---
 kernel/rcupreempt.c |    6 +++---
 2 files changed, 6 insertions(+), 6 deletions(-)

Index: linux-2.6.23.1-rt5/kernel/rcupreempt.c
===================================================================
--- linux-2.6.23.1-rt5.orig/kernel/rcupreempt.c
+++ linux-2.6.23.1-rt5/kernel/rcupreempt.c
@@ -62,7 +62,7 @@
 
 #define GP_STAGES 2
 struct rcu_data {
-	spinlock_t	lock;		/* Protect rcu_data fields. */
+	raw_spinlock_t	lock;		/* Protect rcu_data fields. */
 	long		completed;	/* Number of last completed batch. */
 	int		waitlistcount;
 	struct rcu_head *nextlist;
@@ -76,12 +76,12 @@ struct rcu_data {
 #endif /* #ifdef CONFIG_RCU_TRACE */
 };
 struct rcu_ctrlblk {
-	spinlock_t	fliplock;	/* Protect state-machine transitions. */
+	raw_spinlock_t	fliplock;	/* Protect state-machine transitions. */
 	long		completed;	/* Number of last completed batch. */
 };
 static DEFINE_PER_CPU(struct rcu_data, rcu_data);
 static struct rcu_ctrlblk rcu_ctrlblk = {
-	.fliplock = SPIN_LOCK_UNLOCKED,
+	.fliplock = RAW_SPIN_LOCK_UNLOCKED(rcu_ctrlblk.fliplock),
 	.completed = 0,
 };
 static DEFINE_PER_CPU(int [2], rcu_flipctr) = { 0, 0 };
Index: linux-2.6.23.1-rt5/kernel/rcuclassic.c
===================================================================
--- linux-2.6.23.1-rt5.orig/kernel/rcuclassic.c
+++ linux-2.6.23.1-rt5/kernel/rcuclassic.c
@@ -57,7 +57,7 @@ struct rcu_ctrlblk {
 
 	int	signaled;
 
-	spinlock_t	lock	____cacheline_internodealigned_in_smp;
+	raw_spinlock_t	lock	____cacheline_internodealigned_in_smp;
 	cpumask_t	cpumask; /* CPUs that need to switch in order    */
 				 /* for current batch to proceed.        */
 } ____cacheline_internodealigned_in_smp;
@@ -96,13 +96,13 @@ struct rcu_data {
 static struct rcu_ctrlblk rcu_ctrlblk = {
 	.cur = -300,
 	.completed = -300,
-	.lock = __SPIN_LOCK_UNLOCKED(&rcu_ctrlblk.lock),
+	.lock = RAW_SPIN_LOCK_UNLOCKED(&rcu_ctrlblk.lock),
 	.cpumask = CPU_MASK_NONE,
 };
 static struct rcu_ctrlblk rcu_bh_ctrlblk = {
 	.cur = -300,
 	.completed = -300,
-	.lock = __SPIN_LOCK_UNLOCKED(&rcu_bh_ctrlblk.lock),
+	.lock = RAW_SPIN_LOCK_UNLOCKED(&rcu_bh_ctrlblk.lock),
 	.cpumask = CPU_MASK_NONE,
 };
 
