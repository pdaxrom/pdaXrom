From linux-rt-users-owner@vger.kernel.org Fri Aug 24 19:58:15 2007
Return-Path: <linux-rt-users-owner@vger.kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.1.7-deb (2006-10-05) on debian
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=AWL autolearn=unavailable 
	version=3.1.7-deb
Received: from vger.kernel.org (vger.kernel.org [209.132.176.167]) by
	mail.tglx.de (Postfix) with ESMTP id DF06665C3ED; Fri, 24 Aug 2007 19:58:15
	+0200 (CEST)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand id
	S1765533AbXHXR55 (ORCPT <rfc822;jan.altenberg@linutronix.de> + 1 other);
	Fri, 24 Aug 2007 13:57:57 -0400
Received: (majordomo@vger.kernel.org) by vger.kernel.org id
	S1762671AbXHXR54 (ORCPT <rfc822;linux-rt-users-outgoing>); Fri, 24 Aug 2007
	13:57:56 -0400
Received: from ms-smtp-02.nyroc.rr.com ([24.24.2.56]:35498 "EHLO
	ms-smtp-02.nyroc.rr.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org with
	ESMTP id S1762025AbXHXR5z (ORCPT <rfc822;linux-rt-users@vger.kernel.org>);
	Fri, 24 Aug 2007 13:57:55 -0400
Received: from [192.168.23.10] (cpe-24-94-51-176.stny.res.rr.com
	[24.94.51.176]) by ms-smtp-02.nyroc.rr.com (8.13.6/8.13.6) with ESMTP id
	l7OHvApX025567; Fri, 24 Aug 2007 13:57:11 -0400 (EDT)
Subject: [PATCH RT 1/3]  time keeping add cycle_raw for actual
	incrementation
From:	Steven Rostedt <rostedt@goodmis.org>
To:	Ingo Molnar <mingo@elte.hu>
Cc:	LKML <linux-kernel@vger.kernel.org>, RT <linux-rt-users@vger.kernel.org>, Thomas Gleixner <tglx@linutronix.de>, john stultz <johnstul@us.ibm.com>
Content-Type: text/plain
Date:	Fri, 24 Aug 2007 13:57:09 -0400
Message-Id: <1187978229.2941.17.camel@localhost.localdomain>
Mime-Version: 1.0
X-Mailer: Evolution 2.10.2 
X-Virus-Scanned: Symantec AntiVirus Scan Engine
Sender:	linux-rt-users-owner@vger.kernel.org
Precedence: bulk
X-Mailing-List:	linux-rt-users@vger.kernel.org
X-Filter-To: .Kernel.rt-users
X-Evolution-Source: imap://tglx%40linutronix.de@localhost:8993/
Content-Transfer-Encoding: 8bit

The get_monotonic_cycles needs to produce a monotonic counter as output.
Currently it uses cycles_last as the base to add the delta too.
cycles_last only is the counter that was last measured and is cyclic in
nature (not monotonic).

This patch adds a cycle_raw to produce an accumulative counter.
Unfortunately there is already an cycle_accumulate variable, but that is
used to avoid clock source overflow and can also be decremented
(probably that name should be changed and we should use that for this
patch).


From: John Stultz <johnstul@us.ibm.com>
Signed-off-by: Steven Rostedt <rostedt@goodmis.org>



---
 include/linux/clocksource.h |    3 ++-
 kernel/time/timekeeping.c   |    2 +-
 2 files changed, 3 insertions(+), 2 deletions(-)

Index: linux-2.6.23.1-rt5/include/linux/clocksource.h
===================================================================
--- linux-2.6.23.1-rt5.orig/include/linux/clocksource.h
+++ linux-2.6.23.1-rt5/include/linux/clocksource.h
@@ -83,7 +83,7 @@ struct clocksource {
 #endif
 
 	/* timekeeping specific data, ignore */
-	cycle_t cycle_accumulated, cycle_interval;
+	cycle_t cycle_accumulated, cycle_interval, cycle_raw;
 	u64	xtime_interval;
 	/*
 	 * Second part is written at each timer interrupt
@@ -204,6 +204,7 @@ static inline void clocksource_accumulat
 	cycle_t offset = (now - cs->cycle_last) & cs->mask;
 	cs->cycle_last = now;
 	cs->cycle_accumulated += offset;
+	cs->cycle_raw += offset;
 }
 
 /**
Index: linux-2.6.23.1-rt5/kernel/time/timekeeping.c
===================================================================
--- linux-2.6.23.1-rt5.orig/kernel/time/timekeeping.c
+++ linux-2.6.23.1-rt5/kernel/time/timekeeping.c
@@ -118,7 +118,7 @@ cycle_t notrace get_monotonic_cycles(voi
 	/* calculate the delta since the last update_wall_time: */
 	cycle_delta = (cycle_now - clock->cycle_last) & clock->mask;
 
-	return clock->cycle_last + cycle_delta;
+	return clock->cycle_raw + cycle_delta;
 }
 
 unsigned long notrace cycles_to_usecs(cycle_t cycles)
