
  To fix the following compile error by changing names from
__{read,write}_trylock to ___raw_{read,write}_trylock in asm-powerpc/spinlock.h

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
include/asm-powerpc/spinlock.h
include/linux/spinlock_api_smp.h:49: error: conflicting types for '__read_trylock'
include/asm/spinlock.h:183: error: previous definition of '__read_trylock' was here
include/linux/spinlock_api_smp.h:50: error: conflicting types for '__write_trylock'
include/asm/spinlock.h:207: error: previous definition of '__write_trylock' was here
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

Signed-off-by: Tsutomu Owa <tsutomu.owa@toshiba.co.jp>
-- owa

---
 include/asm-powerpc/spinlock.h |   12 ++++++------
 1 file changed, 6 insertions(+), 6 deletions(-)

Index: linux-2.6.23.1-rt5/include/asm-powerpc/spinlock.h
===================================================================
--- linux-2.6.23.1-rt5.orig/include/asm-powerpc/spinlock.h
+++ linux-2.6.23.1-rt5/include/asm-powerpc/spinlock.h
@@ -179,7 +179,7 @@ extern void __raw_spin_unlock_wait(__raw
  * This returns the old value in the lock + 1,
  * so we got a read lock if the return value is > 0.
  */
-static long __inline__ __read_trylock(__raw_rwlock_t *rw)
+static long __inline__ ___raw_read_trylock(__raw_rwlock_t *rw)
 {
 	long tmp;
 
@@ -203,7 +203,7 @@ static long __inline__ __read_trylock(__
  * This returns the old value in the lock,
  * so we got the write lock if the return value is 0.
  */
-static __inline__ long __write_trylock(__raw_rwlock_t *rw)
+static __inline__ long ___raw_write_trylock(__raw_rwlock_t *rw)
 {
 	long tmp, token;
 
@@ -226,7 +226,7 @@ static __inline__ long __write_trylock(_
 static void __inline__ __raw_read_lock(__raw_rwlock_t *rw)
 {
 	while (1) {
-		if (likely(__read_trylock(rw) > 0))
+		if (likely(___raw_read_trylock(rw) > 0))
 			break;
 		do {
 			HMT_low();
@@ -240,7 +240,7 @@ static void __inline__ __raw_read_lock(_
 static void __inline__ __raw_write_lock(__raw_rwlock_t *rw)
 {
 	while (1) {
-		if (likely(__write_trylock(rw) == 0))
+		if (likely(___raw_write_trylock(rw) == 0))
 			break;
 		do {
 			HMT_low();
@@ -253,12 +253,12 @@ static void __inline__ __raw_write_lock(
 
 static int __inline__ __raw_read_trylock(__raw_rwlock_t *rw)
 {
-	return __read_trylock(rw) > 0;
+	return ___raw_read_trylock(rw) > 0;
 }
 
 static int __inline__ __raw_write_trylock(__raw_rwlock_t *rw)
 {
-	return __write_trylock(rw) == 0;
+	return ___raw_write_trylock(rw) == 0;
 }
 
 static void __inline__ __raw_read_unlock(__raw_rwlock_t *rw)
