---
 include/linux/hardirq.h    |   10 ++++++++++
 include/linux/rcuclassic.h |    2 ++
 include/linux/rcupreempt.h |   22 ++++++++++++++++++++++
 kernel/softirq.c           |    1 +
 kernel/time/tick-sched.c   |    3 +++
 5 files changed, 38 insertions(+)

Index: linux-2.6.23.1-rt5/kernel/softirq.c
===================================================================
--- linux-2.6.23.1-rt5.orig/kernel/softirq.c
+++ linux-2.6.23.1-rt5/kernel/softirq.c
@@ -308,6 +308,7 @@ void irq_exit(void)
 	/* Make sure that timer wheel updates are propagated */
 	if (!in_interrupt() && idle_cpu(smp_processor_id()) && !need_resched())
 		tick_nohz_stop_sched_tick();
+	rcu_irq_exit();
 #endif
 	preempt_enable_no_resched();
 }
Index: linux-2.6.23.1-rt5/kernel/time/tick-sched.c
===================================================================
--- linux-2.6.23.1-rt5.orig/kernel/time/tick-sched.c
+++ linux-2.6.23.1-rt5/kernel/time/tick-sched.c
@@ -247,6 +247,7 @@ void tick_nohz_stop_sched_tick(void)
 			ts->idle_tick = ts->sched_timer.expires;
 			ts->tick_stopped = 1;
 			ts->idle_jiffies = last_jiffies;
+			rcu_enter_nohz();
 		}
 
 		/*
@@ -337,6 +338,8 @@ void tick_nohz_restart_sched_tick(void)
 	if (!ts->tick_stopped)
 		return;
 
+	rcu_exit_nohz();
+
 	/* Update jiffies first */
 	now = ktime_get();
 
Index: linux-2.6.23.1-rt5/include/linux/hardirq.h
===================================================================
--- linux-2.6.23.1-rt5.orig/include/linux/hardirq.h
+++ linux-2.6.23.1-rt5/include/linux/hardirq.h
@@ -113,6 +113,14 @@ static inline void account_system_vtime(
 }
 #endif
 
+#if defined(CONFIG_PREEMPT_RCU) && defined(CONFIG_NO_HZ)
+extern void rcu_irq_enter(void);
+extern void rcu_irq_exit(void);
+#else
+# define rcu_irq_enter() do { } while (0)
+# define rcu_irq_exit() do { } while (0)
+#endif /* CONFIG_PREEMPT_RCU */
+
 /*
  * It is safe to do non-atomic ops on ->hardirq_context,
  * because NMI handlers may not preempt and the ops are
@@ -121,6 +129,7 @@ static inline void account_system_vtime(
  */
 #define __irq_enter()					\
 	do {						\
+		rcu_irq_enter();			\
 		account_system_vtime(current);		\
 		add_preempt_count(HARDIRQ_OFFSET);	\
 		trace_hardirq_enter();			\
@@ -139,6 +148,7 @@ extern void irq_enter(void);
 		trace_hardirq_exit();			\
 		account_system_vtime(current);		\
 		sub_preempt_count(HARDIRQ_OFFSET);	\
+		rcu_irq_exit();				\
 	} while (0)
 
 /*
Index: linux-2.6.23.1-rt5/include/linux/rcuclassic.h
===================================================================
--- linux-2.6.23.1-rt5.orig/include/linux/rcuclassic.h
+++ linux-2.6.23.1-rt5/include/linux/rcuclassic.h
@@ -86,6 +86,8 @@ static inline void rcu_bh_qsctr_inc(int 
 #define rcu_online_cpu_rt(cpu)
 #define rcu_pending_rt(cpu) 0
 #define rcu_process_callbacks_rt(unused) do { } while (0)
+#define rcu_enter_nohz()	do { } while (0)
+#define rcu_exit_nohz()		do { } while (0)
 
 extern void FASTCALL(call_rcu_classic(struct rcu_head *head,
 		     void (*func)(struct rcu_head *head)));
Index: linux-2.6.23.1-rt5/include/linux/rcupreempt.h
===================================================================
--- linux-2.6.23.1-rt5.orig/include/linux/rcupreempt.h
+++ linux-2.6.23.1-rt5/include/linux/rcupreempt.h
@@ -77,5 +77,27 @@ extern struct rcupreempt_trace *rcupreem
 
 struct softirq_action;
 
+#ifdef CONFIG_NO_HZ
+DECLARE_PER_CPU(long, dynticks_progress_counter);
+
+static inline void rcu_enter_nohz(void)
+{
+	__get_cpu_var(dynticks_progress_counter)++;
+	WARN_ON(__get_cpu_var(dynticks_progress_counter) & 0x1);
+	mb();
+}
+
+static inline void rcu_exit_nohz(void)
+{
+	mb();
+	__get_cpu_var(dynticks_progress_counter)++;
+	WARN_ON(!(__get_cpu_var(dynticks_progress_counter) & 0x1));
+}
+
+#else /* CONFIG_NO_HZ */
+#define rcu_enter_nohz()	do { } while (0)
+#define rcu_exit_nohz()		do { } while (0)
+#endif /* CONFIG_NO_HZ */
+
 #endif /* __KERNEL__ */
 #endif /* __LINUX_RCUPREEMPT_H */
