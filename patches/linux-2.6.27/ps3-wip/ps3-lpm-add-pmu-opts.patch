Subject: PS3: Add pmu platform routines

A work-in-progress.

Add the PS3 platform abstraction layer.

Signed-off-by: Geoff Levand <geoffrey.levand@am.sony.com>
---
 arch/powerpc/include/asm/ps3.h |   21 ---
 drivers/ps3/ps3-lpm.c          |  265 +++++++++++++++++++++++------------------
 2 files changed, 152 insertions(+), 134 deletions(-)

--- a/arch/powerpc/include/asm/ps3.h
+++ b/arch/powerpc/include/asm/ps3.h
@@ -492,27 +492,6 @@ void ps3_set_bookmark(u64 bookmark);
 void ps3_set_pm_bookmark(u64 tag, u64 incident, u64 th_id);
 int ps3_set_signal(u64 rtas_signal_group, u8 signal_bit, u16 sub_unit,
 	u8 bus_word);
-
-u32 ps3_read_phys_ctr(u32 cpu, u32 phys_ctr);
-void ps3_write_phys_ctr(u32 cpu, u32 phys_ctr, u32 val);
-u32 ps3_read_ctr(u32 cpu, u32 ctr);
-void ps3_write_ctr(u32 cpu, u32 ctr, u32 val);
-
-u32 ps3_read_pm07_control(u32 cpu, u32 ctr);
-void ps3_write_pm07_control(u32 cpu, u32 ctr, u32 val);
-u32 ps3_read_pm(u32 cpu, enum pm_reg_name reg);
-void ps3_write_pm(u32 cpu, enum pm_reg_name reg, u32 val);
-
-u32 ps3_get_ctr_size(u32 cpu, u32 phys_ctr);
-void ps3_set_ctr_size(u32 cpu, u32 phys_ctr, u32 ctr_size);
-
-void ps3_enable_pm(u32 cpu);
-void ps3_disable_pm(u32 cpu);
-void ps3_enable_pm_interrupts(u32 cpu, u32 thread, u32 mask);
-void ps3_disable_pm_interrupts(u32 cpu);
-
-u32 ps3_get_and_clear_pm_interrupts(u32 cpu);
-void ps3_sync_irq(int node);
 u32 ps3_get_hw_thread_id(int cpu);
 u64 ps3_get_spe_id(void *arg);
 
--- a/drivers/ps3/ps3-lpm.c
+++ b/drivers/ps3/ps3-lpm.c
@@ -143,20 +143,16 @@ enum {
 	PS3_LPM_DEFAULT_TB_CACHE_SIZE = 0x4000,
 };
 
-/**
- * lpm_priv - Static instance of the lpm data.
- *
- * Since the exported routines don't support the notion of a device
- * instance we need to hold the instance in this static variable
- * and then only allow at most one instance at a time to be created.
- */
-
-static struct ps3_lpm_priv *lpm_priv;
+static struct device *sbd(struct ps3_lpm_priv *p)
+{
+	BUG_ON(!p || !p->sbd);
+	return &p->sbd->core;
+}
 
-static struct device *sbd_core(void)
+static struct ps3_lpm_priv *to_priv(void *p)
 {
-	BUG_ON(!lpm_priv || !lpm_priv->sbd);
-	return &lpm_priv->sbd->core;
+	BUG_ON(!p);
+	return p;
 }
 
 /**
@@ -202,37 +198,38 @@ EXPORT_SYMBOL_GPL(ps3_set_pm_bookmark);
  * ps3_read_pm - Read Other LPM control registers.
  */
 
-u32 ps3_read_pm(u32 cpu, enum pm_reg_name reg)
+static u32 ps3_read_pm(void *p, u32 cpu, enum pm_reg_name reg)
 {
+	struct ps3_lpm_priv *priv = to_priv(p);
 	int result = 0;
 	u64 val = 0;
 
 	switch (reg) {
 	case pm_control:
-		return lpm_priv->shadow.pm_control;
+		return priv->shadow.pm_control;
 	case trace_address:
 		return CBE_PM_TRACE_BUF_EMPTY;
 	case pm_start_stop:
-		return lpm_priv->shadow.pm_start_stop;
+		return priv->shadow.pm_start_stop;
 	case pm_interval:
-		result = lv1_set_lpm_interval(lpm_priv->lpm_id, 0, 0, &val);
+		result = lv1_set_lpm_interval(priv->lpm_id, 0, 0, &val);
 		if (result) {
 			val = 0;
-			dev_dbg(sbd_core(), "%s:%u: lv1 set_inteval failed: "
+			dev_dbg(sbd(priv), "%s:%u: lv1 set_inteval failed: "
 				"reg %u, %s\n", __func__, __LINE__, reg,
 				ps3_result(result));
 		}
 		return (u32)val;
 	case group_control:
-		return lpm_priv->shadow.group_control;
+		return priv->shadow.group_control;
 	case debug_bus_control:
-		return lpm_priv->shadow.debug_bus_control;
+		return priv->shadow.debug_bus_control;
 	case pm_status:
-		result = lv1_get_lpm_interrupt_status(lpm_priv->lpm_id,
+		result = lv1_get_lpm_interrupt_status(priv->lpm_id,
 						      &val);
 		if (result) {
 			val = 0;
-			dev_dbg(sbd_core(), "%s:%u: lv1 get_lpm_status failed: "
+			dev_dbg(sbd(priv), "%s:%u: lv1 get_lpm_status failed: "
 				"reg %u, %s\n", __func__, __LINE__, reg,
 				ps3_result(result));
 		}
@@ -240,7 +237,7 @@ u32 ps3_read_pm(u32 cpu, enum pm_reg_nam
 	case ext_tr_timer:
 		return 0;
 	default:
-		dev_dbg(sbd_core(), "%s:%u: unknown reg: %d\n", __func__,
+		dev_dbg(sbd(priv), "%s:%u: unknown reg: %d\n", __func__,
 			__LINE__, reg);
 		BUG();
 		break;
@@ -248,75 +245,75 @@ u32 ps3_read_pm(u32 cpu, enum pm_reg_nam
 
 	return 0;
 }
-EXPORT_SYMBOL_GPL(ps3_read_pm);
 
 /**
  * ps3_write_pm - Write Other LPM control registers.
  */
 
-void ps3_write_pm(u32 cpu, enum pm_reg_name reg, u32 val)
+static void ps3_write_pm(void* p, u32 cpu, enum pm_reg_name reg,
+	u32 val)
 {
+	struct ps3_lpm_priv *priv = to_priv(p);
 	int result = 0;
 	u64 dummy;
 
 	switch (reg) {
 	case group_control:
-		if (val != lpm_priv->shadow.group_control)
-			result = lv1_set_lpm_group_control(lpm_priv->lpm_id,
+		if (val != priv->shadow.group_control)
+			result = lv1_set_lpm_group_control(priv->lpm_id,
 							   val,
 							   PS3_WRITE_PM_MASK,
 							   &dummy);
-		lpm_priv->shadow.group_control = val;
+		priv->shadow.group_control = val;
 		break;
 	case debug_bus_control:
-		if (val != lpm_priv->shadow.debug_bus_control)
-			result = lv1_set_lpm_debug_bus_control(lpm_priv->lpm_id,
+		if (val != priv->shadow.debug_bus_control)
+			result = lv1_set_lpm_debug_bus_control(priv->lpm_id,
 							      val,
 							      PS3_WRITE_PM_MASK,
 							      &dummy);
-		lpm_priv->shadow.debug_bus_control = val;
+		priv->shadow.debug_bus_control = val;
 		break;
 	case pm_control:
 		if (use_start_stop_bookmark)
 			val |= (PS3_PM_CONTROL_PPU_TH0_BOOKMARK |
 				PS3_PM_CONTROL_PPU_TH1_BOOKMARK);
-		if (val != lpm_priv->shadow.pm_control)
-			result = lv1_set_lpm_general_control(lpm_priv->lpm_id,
+		if (val != priv->shadow.pm_control)
+			result = lv1_set_lpm_general_control(priv->lpm_id,
 							     val,
 							     PS3_WRITE_PM_MASK,
 							     0, 0, &dummy,
 							     &dummy);
-		lpm_priv->shadow.pm_control = val;
+		priv->shadow.pm_control = val;
 		break;
 	case pm_interval:
-		result = lv1_set_lpm_interval(lpm_priv->lpm_id, val,
+		result = lv1_set_lpm_interval(priv->lpm_id, val,
 					      PS3_WRITE_PM_MASK, &dummy);
 		break;
 	case pm_start_stop:
-		if (val != lpm_priv->shadow.pm_start_stop)
-			result = lv1_set_lpm_trigger_control(lpm_priv->lpm_id,
+		if (val != priv->shadow.pm_start_stop)
+			result = lv1_set_lpm_trigger_control(priv->lpm_id,
 							     val,
 							     PS3_WRITE_PM_MASK,
 							     &dummy);
-		lpm_priv->shadow.pm_start_stop = val;
+		priv->shadow.pm_start_stop = val;
 		break;
 	case trace_address:
 	case ext_tr_timer:
 	case pm_status:
 		break;
 	default:
-		dev_dbg(sbd_core(), "%s:%u: unknown reg: %d\n", __func__,
+		dev_dbg(sbd(priv), "%s:%u: unknown reg: %d\n", __func__,
 			__LINE__, reg);
 		BUG();
 		break;
 	}
 
 	if (result)
-		dev_err(sbd_core(), "%s:%u: lv1 set_control failed: "
+		dev_err(sbd(priv), "%s:%u: lv1 set_control failed: "
 			"reg %u, %s\n", __func__, __LINE__, reg,
 			ps3_result(result));
 }
-EXPORT_SYMBOL_GPL(ps3_write_pm);
 
 /**
  * ps3_read_phys_ctr - Read physical counter registers.
@@ -325,22 +322,23 @@ EXPORT_SYMBOL_GPL(ps3_write_pm);
  * counters.
  */
 
-u32 ps3_read_phys_ctr(u32 cpu, u32 phys_ctr)
+static u32 ps3_read_phys_ctr(void* p, u32 cpu, u32 phys_ctr)
 {
+	struct ps3_lpm_priv *priv = to_priv(p);
 	int result;
 	u64 counter0415;
 	u64 counter2637;
 
 	if (phys_ctr >= NR_PHYS_CTRS) {
-		dev_dbg(sbd_core(), "%s:%u: phys_ctr too big: %u\n", __func__,
+		dev_dbg(sbd(priv), "%s:%u: phys_ctr too big: %u\n", __func__,
 			__LINE__, phys_ctr);
 		return 0;
 	}
 
-	result = lv1_set_lpm_counter(lpm_priv->lpm_id, 0, 0, 0, 0, &counter0415,
+	result = lv1_set_lpm_counter(priv->lpm_id, 0, 0, 0, 0, &counter0415,
 				     &counter2637);
 	if (result) {
-		dev_err(sbd_core(), "%s:%u: lv1_set_lpm_counter failed: "
+		dev_err(sbd(priv), "%s:%u: lv1_set_lpm_counter failed: "
 			"phys_ctr %u, %s\n", __func__, __LINE__, phys_ctr,
 			ps3_result(result));
 		return 0;
@@ -360,7 +358,6 @@ u32 ps3_read_phys_ctr(u32 cpu, u32 phys_
 	}
 	return 0;
 }
-EXPORT_SYMBOL_GPL(ps3_read_phys_ctr);
 
 /**
  * ps3_write_phys_ctr - Write physical counter registers.
@@ -369,8 +366,10 @@ EXPORT_SYMBOL_GPL(ps3_read_phys_ctr);
  * counters.
  */
 
-void ps3_write_phys_ctr(u32 cpu, u32 phys_ctr, u32 val)
+static void ps3_write_phys_ctr(void* p, u32 cpu, u32 phys_ctr,
+	u32 val)
 {
+	struct ps3_lpm_priv *priv = to_priv(p);
 	u64 counter0415;
 	u64 counter0415_mask;
 	u64 counter2637;
@@ -378,7 +377,7 @@ void ps3_write_phys_ctr(u32 cpu, u32 phy
 	int result;
 
 	if (phys_ctr >= NR_PHYS_CTRS) {
-		dev_dbg(sbd_core(), "%s:%u: phys_ctr too big: %u\n", __func__,
+		dev_dbg(sbd(priv), "%s:%u: phys_ctr too big: %u\n", __func__,
 			__LINE__, phys_ctr);
 		return;
 	}
@@ -412,16 +411,15 @@ void ps3_write_phys_ctr(u32 cpu, u32 phy
 		BUG();
 	}
 
-	result = lv1_set_lpm_counter(lpm_priv->lpm_id,
+	result = lv1_set_lpm_counter(priv->lpm_id,
 				     counter0415, counter0415_mask,
 				     counter2637, counter2637_mask,
 				     &counter0415, &counter2637);
 	if (result)
-		dev_err(sbd_core(), "%s:%u: lv1_set_lpm_counter failed: "
+		dev_err(sbd(priv), "%s:%u: lv1_set_lpm_counter failed: "
 			"phys_ctr %u, val %u, %s\n", __func__, __LINE__,
 			phys_ctr, val, ps3_result(result));
 }
-EXPORT_SYMBOL_GPL(ps3_write_phys_ctr);
 
 /**
  * ps3_get_ctr_size - Get the size of a physical counter.
@@ -429,52 +427,54 @@ EXPORT_SYMBOL_GPL(ps3_write_phys_ctr);
  * Returns either 16 or 32.
  */
 
-u32 ps3_get_ctr_size(u32 cpu, u32 phys_ctr)
+static u32 ps3_get_ctr_size(void* p, u32 cpu, u32 phys_ctr)
 {
+	struct ps3_lpm_priv *priv = to_priv(p);
 	u32 pm_ctrl;
 
 	if (phys_ctr >= NR_PHYS_CTRS) {
-		dev_dbg(sbd_core(), "%s:%u: phys_ctr too big: %u\n", __func__,
+		dev_dbg(sbd(priv), "%s:%u: phys_ctr too big: %u\n", __func__,
 			__LINE__, phys_ctr);
 		return 0;
 	}
 
-	pm_ctrl = ps3_read_pm(cpu, pm_control);
+	pm_ctrl = ps3_read_pm(p, cpu, pm_control);
 	return (pm_ctrl & CBE_PM_16BIT_CTR(phys_ctr)) ? 16 : 32;
 }
-EXPORT_SYMBOL_GPL(ps3_get_ctr_size);
 
 /**
  * ps3_set_ctr_size - Set the size of a physical counter to 16 or 32 bits.
  */
 
-void ps3_set_ctr_size(u32 cpu, u32 phys_ctr, u32 ctr_size)
+static void ps3_set_ctr_size(void* p, u32 cpu, u32 phys_ctr,
+	u32 ctr_size)
 {
+	struct ps3_lpm_priv *priv = to_priv(p);
 	u32 pm_ctrl;
 
 	if (phys_ctr >= NR_PHYS_CTRS) {
-		dev_dbg(sbd_core(), "%s:%u: phys_ctr too big: %u\n", __func__,
+		dev_dbg(sbd(priv), "%s:%u: phys_ctr too big: %u\n", __func__,
 			__LINE__, phys_ctr);
 		return;
 	}
 
-	pm_ctrl = ps3_read_pm(cpu, pm_control);
+	pm_ctrl = ps3_read_pm(p, cpu, pm_control);
 
 	switch (ctr_size) {
 	case 16:
 		pm_ctrl |= CBE_PM_16BIT_CTR(phys_ctr);
-		ps3_write_pm(cpu, pm_control, pm_ctrl);
+		ps3_write_pm(p, cpu, pm_control, pm_ctrl);
 		break;
 
 	case 32:
 		pm_ctrl &= ~CBE_PM_16BIT_CTR(phys_ctr);
-		ps3_write_pm(cpu, pm_control, pm_ctrl);
+		ps3_write_pm(p, cpu, pm_control, pm_ctrl);
 		break;
 	default:
 		BUG();
 	}
 }
-EXPORT_SYMBOL_GPL(ps3_set_ctr_size);
+
 /**
  * ps3_read_ctr - Read counter.
  *
@@ -482,19 +482,18 @@ EXPORT_SYMBOL_GPL(ps3_set_ctr_size);
  * Counters 4, 5, 6 & 7 are always 16 bit.
  */
 
-u32 ps3_read_ctr(u32 cpu, u32 ctr)
+static u32 ps3_read_ctr(void* p, u32 cpu, u32 ctr)
 {
 	u32 val;
 	u32 phys_ctr = ctr & (NR_PHYS_CTRS - 1);
 
-	val = ps3_read_phys_ctr(cpu, phys_ctr);
+	val = ps3_read_phys_ctr(p, cpu, phys_ctr);
 
-	if (ps3_get_ctr_size(cpu, phys_ctr) == 16)
+	if (ps3_get_ctr_size(p, cpu, phys_ctr) == 16)
 		val = (ctr < NR_PHYS_CTRS) ? (val >> 16) : (val & 0xffff);
 
 	return val;
 }
-EXPORT_SYMBOL_GPL(ps3_read_ctr);
 
 /**
  * ps3_write_ctr - Write counter.
@@ -503,15 +502,15 @@ EXPORT_SYMBOL_GPL(ps3_read_ctr);
  * Counters 4, 5, 6 & 7 are always 16 bit.
  */
 
-void ps3_write_ctr(u32 cpu, u32 ctr, u32 val)
+static void ps3_write_ctr(void* p, u32 cpu, u32 ctr, u32 val)
 {
 	u32 phys_ctr;
 	u32 phys_val;
 
 	phys_ctr = ctr & (NR_PHYS_CTRS - 1);
 
-	if (ps3_get_ctr_size(cpu, phys_ctr) == 16) {
-		phys_val = ps3_read_phys_ctr(cpu, phys_ctr);
+	if (ps3_get_ctr_size(p, cpu, phys_ctr) == 16) {
+		phys_val = ps3_read_phys_ctr(p, cpu, phys_ctr);
 
 		if (ctr < NR_PHYS_CTRS)
 			val = (val << 16) | (phys_val & 0xffff);
@@ -519,9 +518,8 @@ void ps3_write_ctr(u32 cpu, u32 ctr, u32
 			val = (val & 0xffff) | (phys_val & 0xffff0000);
 	}
 
-	ps3_write_phys_ctr(cpu, phys_ctr, val);
+	ps3_write_phys_ctr(p, cpu, phys_ctr, val);
 }
-EXPORT_SYMBOL_GPL(ps3_write_ctr);
 
 /**
  * ps3_read_pm07_control - Read counter control registers.
@@ -529,11 +527,10 @@ EXPORT_SYMBOL_GPL(ps3_write_ctr);
  * Each logical counter has a corresponding control register.
  */
 
-u32 ps3_read_pm07_control(u32 cpu, u32 ctr)
+static u32 ps3_read_pm07_control(void* p, u32 cpu, u32 ctr)
 {
 	return 0;
 }
-EXPORT_SYMBOL_GPL(ps3_read_pm07_control);
 
 /**
  * ps3_write_pm07_control - Write counter control registers.
@@ -541,26 +538,27 @@ EXPORT_SYMBOL_GPL(ps3_read_pm07_control)
  * Each logical counter has a corresponding control register.
  */
 
-void ps3_write_pm07_control(u32 cpu, u32 ctr, u32 val)
+static void ps3_write_pm07_control(void* p, u32 cpu, u32 ctr,
+	u32 val)
 {
+	struct ps3_lpm_priv *priv = to_priv(p);
 	int result;
 	static const u64 mask = 0xFFFFFFFFFFFFFFFFULL;
 	u64 old_value;
 
 	if (ctr >= NR_CTRS) {
-		dev_dbg(sbd_core(), "%s:%u: ctr too big: %u\n", __func__,
+		dev_dbg(sbd(priv), "%s:%u: ctr too big: %u\n", __func__,
 			__LINE__, ctr);
 		return;
 	}
 
-	result = lv1_set_lpm_counter_control(lpm_priv->lpm_id, ctr, val, mask,
+	result = lv1_set_lpm_counter_control(priv->lpm_id, ctr, val, mask,
 					     &old_value);
 	if (result)
-		dev_err(sbd_core(), "%s:%u: lv1_set_lpm_counter_control "
+		dev_err(sbd(priv), "%s:%u: lv1_set_lpm_counter_control "
 			"failed: ctr %u, %s\n", __func__, __LINE__, ctr,
 			ps3_result(result));
 }
-EXPORT_SYMBOL_GPL(ps3_write_pm07_control);
 
 /**
  * ps3_enable_pm - Enable the entire performance monitoring unit.
@@ -568,19 +566,20 @@ EXPORT_SYMBOL_GPL(ps3_write_pm07_control
  * When we enable the LPM, all pending writes to counters get committed.
  */
 
-void ps3_enable_pm(u32 cpu)
+static void ps3_enable_pm(void* p, u32 cpu)
 {
+	struct ps3_lpm_priv *priv = to_priv(p);
 	int result;
 	u64 tmp;
 	int insert_bookmark = 0;
 
-	lpm_priv->tb_count = 0;
+	priv->tb_count = 0;
 
 	if (use_start_stop_bookmark) {
-		if (!(lpm_priv->shadow.pm_start_stop &
+		if (!(priv->shadow.pm_start_stop &
 			(PS3_PM_START_STOP_START_MASK
 			| PS3_PM_START_STOP_STOP_MASK))) {
-			result = lv1_set_lpm_trigger_control(lpm_priv->lpm_id,
+			result = lv1_set_lpm_trigger_control(priv->lpm_id,
 				(PS3_PM_START_STOP_PPU_TH0_BOOKMARK_START |
 				PS3_PM_START_STOP_PPU_TH1_BOOKMARK_START |
 				PS3_PM_START_STOP_PPU_TH0_BOOKMARK_STOP |
@@ -588,7 +587,7 @@ void ps3_enable_pm(u32 cpu)
 				0xFFFFFFFFFFFFFFFFULL, &tmp);
 
 			if (result)
-				dev_err(sbd_core(), "%s:%u: "
+				dev_err(sbd(priv), "%s:%u: "
 					"lv1_set_lpm_trigger_control failed: "
 					"%s\n", __func__, __LINE__,
 					ps3_result(result));
@@ -597,43 +596,42 @@ void ps3_enable_pm(u32 cpu)
 		}
 	}
 
-	result = lv1_start_lpm(lpm_priv->lpm_id);
+	result = lv1_start_lpm(priv->lpm_id);
 
 	if (result)
-		dev_err(sbd_core(), "%s:%u: lv1_start_lpm failed: %s\n",
+		dev_err(sbd(priv), "%s:%u: lv1_start_lpm failed: %s\n",
 			__func__, __LINE__, ps3_result(result));
 
 	if (use_start_stop_bookmark && !result && insert_bookmark)
 		ps3_set_bookmark(get_tb() | PS3_PM_BOOKMARK_START);
 }
-EXPORT_SYMBOL_GPL(ps3_enable_pm);
 
 /**
  * ps3_disable_pm - Disable the entire performance monitoring unit.
  */
 
-void ps3_disable_pm(u32 cpu)
+static void ps3_disable_pm(void* p, u32 cpu)
 {
+	struct ps3_lpm_priv *priv = to_priv(p);
 	int result;
 	u64 tmp;
 
 	ps3_set_bookmark(get_tb() | PS3_PM_BOOKMARK_STOP);
 
-	result = lv1_stop_lpm(lpm_priv->lpm_id, &tmp);
+	result = lv1_stop_lpm(priv->lpm_id, &tmp);
 
 	if (result) {
 		if(result != LV1_WRONG_STATE)
-			dev_err(sbd_core(), "%s:%u: lv1_stop_lpm failed: %s\n",
+			dev_err(sbd(priv), "%s:%u: lv1_stop_lpm failed: %s\n",
 				__func__, __LINE__, ps3_result(result));
 		return;
 	}
 
-	lpm_priv->tb_count = tmp;
+	priv->tb_count = tmp;
 
-	dev_dbg(sbd_core(), "%s:%u: tb_count %lu (%lxh)\n", __func__, __LINE__,
-		lpm_priv->tb_count, lpm_priv->tb_count);
+	dev_dbg(sbd(priv), "%s:%u: tb_count %lu (%lxh)\n", __func__, __LINE__,
+		priv->tb_count, priv->tb_count);
 }
-EXPORT_SYMBOL_GPL(ps3_disable_pm);
 
 /**
  * ps3_get_and_clear_pm_interrupts -
@@ -642,11 +640,10 @@ EXPORT_SYMBOL_GPL(ps3_disable_pm);
  * Reading pm_status clears the interrupt bits.
  */
 
-u32 ps3_get_and_clear_pm_interrupts(u32 cpu)
+static u32 ps3_get_and_clear_pm_interrupts(void* p, u32 cpu)
 {
-	return ps3_read_pm(cpu, pm_status);
+	return ps3_read_pm(p, cpu, pm_status);
 }
-EXPORT_SYMBOL_GPL(ps3_get_and_clear_pm_interrupts);
 
 /**
  * ps3_enable_pm_interrupts -
@@ -655,12 +652,12 @@ EXPORT_SYMBOL_GPL(ps3_get_and_clear_pm_i
  * Enables the interrupt bits in the pm_status register.
  */
 
-void ps3_enable_pm_interrupts(u32 cpu, u32 thread, u32 mask)
+static void ps3_enable_pm_interrupts(void* p, u32 cpu, u32 thread,
+	u32 mask)
 {
 	if (mask)
-		ps3_write_pm(cpu, pm_status, mask);
+		ps3_write_pm(p, cpu, pm_status, mask);
 }
-EXPORT_SYMBOL_GPL(ps3_enable_pm_interrupts);
 
 /**
  * ps3_enable_pm_interrupts -
@@ -668,12 +665,11 @@ EXPORT_SYMBOL_GPL(ps3_enable_pm_interrup
  * Disabling interrupts for the entire performance monitoring unit.
  */
 
-void ps3_disable_pm_interrupts(u32 cpu)
+static void ps3_disable_pm_interrupts(void* p, u32 cpu)
 {
-	ps3_get_and_clear_pm_interrupts(cpu);
-	ps3_write_pm(cpu, pm_status, 0);
+	ps3_get_and_clear_pm_interrupts(p, cpu);
+	ps3_write_pm(p, cpu, pm_status, 0);
 }
-EXPORT_SYMBOL_GPL(ps3_disable_pm_interrupts);
 
 static u64 pm_translate_signal_group_number_on_island2(u64 subgroup)
 {
@@ -779,6 +775,22 @@ static u64 pm_translate_signal_group_num
 	return PM_ISLAND8_BASE_SIGNAL_GROUP_NUMBER + subgroup;
 }
 
+/**
+ * lpm_priv - Static instance of the lpm data.
+ *
+ * Since some of the exported routines don't support the notion of a device
+ * instance we need to hold the instance in this static variable
+ * and then only allow at most one instance at a time to be created.
+ */
+
+static struct ps3_lpm_priv *lpm_priv;
+
+static struct device *sbd_core(void)
+{
+	BUG_ON(!lpm_priv || !lpm_priv->sbd);
+	return &lpm_priv->sbd->core;
+}
+
 static u64 pm_signal_group_to_ps3_lv1_signal_group(u64 group)
 {
 	u64 island;
@@ -843,8 +855,8 @@ static u64 pm_signal_group_to_ps3_lv1_si
 	case 8:
 		return pm_translate_signal_group_number_on_island8(subgroup);
 	default:
-		dev_dbg(sbd_core(), "%s:%u: island not found: %lu\n", __func__,
-			__LINE__, group);
+		dev_dbg(sbd_core(), "%s:%u: island not found: %lu\n",
+			__func__, __LINE__, group);
 		BUG();
 		break;
 	}
@@ -876,9 +888,9 @@ static int __ps3_set_signal(u64 lv1_sign
 				 signal_select, attr1, attr2, attr3);
 	if (ret)
 		dev_err(sbd_core(),
-			"%s:%u: error:%d 0x%lx 0x%lx 0x%lx 0x%lx 0x%lx 0x%lx\n",
-			__func__, __LINE__, ret, lv1_signal_group, bus_select,
-			signal_select, attr1, attr2, attr3);
+			"%s:%u: error %s: 0x%lx 0x%lx 0x%lx 0x%lx 0x%lx 0x%lx\n",
+			__func__, __LINE__, ps3_result(ret), lv1_signal_group,
+			bus_select, signal_select, attr1, attr2, attr3);
 
 	return ret;
 }
@@ -1182,25 +1194,52 @@ int ps3_lpm_copy_tb_to_user(unsigned lon
 }
 EXPORT_SYMBOL_GPL(ps3_lpm_copy_tb_to_user);
 
+static struct cell_pmu_ops cell_pmu_ops_ps3 = {
+	.read_phys_ctr               = ps3_read_phys_ctr,
+	.write_phys_ctr              = ps3_write_phys_ctr,
+	.read_ctr                    = ps3_read_ctr,
+	.write_ctr	             = ps3_write_ctr,
+	.read_pm07_control           = ps3_read_pm07_control,
+	.write_pm07_control          = ps3_write_pm07_control,
+	.read_pm                     = ps3_read_pm,
+	.write_pm                    = ps3_write_pm,
+	.get_ctr_size                = ps3_get_ctr_size,
+	.set_ctr_size                = ps3_set_ctr_size,
+	.enable_pm                   = ps3_enable_pm,
+	.disable_pm                  = ps3_disable_pm,
+//	.read_trace_buffer           = ps3_read_trace_buffer, ...todo
+	.get_and_clear_pm_interrupts = ps3_get_and_clear_pm_interrupts,
+	.enable_pm_interrupts        = ps3_enable_pm_interrupts,
+	.disable_pm_interrupts       = ps3_disable_pm_interrupts,
+//	.sync_irq                    = ps3_sync_irq, ...this seems generic
+};
+
 static int __devinit ps3_lpm_probe(struct ps3_system_bus_device *dev)
 {
+	struct ps3_lpm_priv *priv;
+
 	dev_dbg(&dev->core, " -> %s:%u\n", __func__, __LINE__);
 
-	if (lpm_priv) {
+	if (cell_pmu_ops_ps3.priv) {
 		dev_info(&dev->core, "%s:%u: called twice\n",
 			__func__, __LINE__);
 		return -EBUSY;
 	}
 
-	lpm_priv = kzalloc(sizeof(*lpm_priv), GFP_KERNEL);
+	priv = kzalloc(sizeof(struct ps3_lpm_priv), GFP_KERNEL);
 
-	if (!lpm_priv)
+	if (!priv)
 		return -ENOMEM;
 
-	lpm_priv->sbd = dev;
-	lpm_priv->node_id = dev->lpm.node_id;
-	lpm_priv->pu_id = dev->lpm.pu_id;
-	lpm_priv->rights = dev->lpm.rights;
+	priv->sbd = dev;
+	priv->node_id = dev->lpm.node_id;
+	priv->pu_id = dev->lpm.pu_id;
+	priv->rights = dev->lpm.rights;
+
+	cell_pmu_ops_ps3.priv = priv;
+	cell_pmu_ops_init(&cell_pmu_ops_ps3);
+
+	lpm_priv = priv;
 
 	dev_info(&dev->core, " <- %s:%u:\n", __func__, __LINE__);
 
